/**************************************************************************
  common.cpp - MPEG audio decoding subroutines for layers I, II and III.

  Author(s): Juha Ojanpera
  Copyright (c) 1999-2000 Juha Ojanpera.
  *************************************************************************/

/**************************************************************************
  External Objects Needed
  *************************************************************************/

/*-- Project Headers. --*/
#include "core/bits.h"
#include "mstream.h"


/**************************************************************************
  Title        : decode_header

  Purpose      : Reads header information (excluding syncword) from the
                 bitstream.

  Usage        : decode_header(mp)

  Input        : mp - MPEG audio parameters

  Explanation  : Header information is commmon to all layers. Note also that
                 this function doesn't interprete the fields of the header,
                 it is done by the MP_Header-class.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
decode_header(MP_Stream *mp)
{
    int32 header = (!mp->side_info->sfbData.mpeg25) << HEADER_BITS;

    header |= mp->bs->getBits(HEADER_BITS);
    mp->prev_header->SetHeader(mp->header->SetHeader(header));

    if (mp->header->error_protection())
        mp->bs->getBits(16);
}


/**************************************************************************
                   Common Tables for Layer I and II.
 *************************************************************************/

/*
   Purpose:     (2^b)-1, b = 0,...,15
   Explanation: - */
int16 sample_mask[] = { 0,   1,   3,    7,    15,   31,   63,    127,
                        255, 511, 1023, 2047, 4095, 8191, 16383, 32767 };

/*
   Purpose:     (2^b), b = 0,...,15
   Explanation: - */
uint32 sign_mask[] = { 0,   2,   4,    8,    16,   32,   64,    128,
                       256, 512, 1024, 2048, 4096, 8192, 16384, 32768L };

/*
   Purpose:     Scale factors for Layer I and II.
   Explanation: - */
FLOAT scale_factors[SBLIMIT << 1] = {
    2.00000000000000, 1.58740105196820, 1.25992104989487, 1.00000000000000,
    0.79370052598410, 0.62996052494744, 0.50000000000000, 0.39685026299205,
    0.31498026247372, 0.25000000000000, 0.19842513149602, 0.15749013123686,
    0.12500000000000, 0.09921256574801, 0.07874506561843, 0.06250000000000,
    0.04960628287401, 0.03937253280921, 0.03125000000000, 0.02480314143700,
    0.01968626640461, 0.01562500000000, 0.01240157071850, 0.00984313320230,
    0.00781250000000, 0.00620078535925, 0.00492156660115, 0.00390625000000,
    0.00310039267963, 0.00246078330058, 0.00195312500000, 0.00155019633981,
    0.00123039165029, 0.00097656250000, 0.00077509816991, 0.00061519582514,
    0.00048828125000, 0.00038754908495, 0.00030759791257, 0.00024414062500,
    0.00019377454248, 0.00015379895629, 0.00012207031250, 0.00009688727124,
    0.00007689947814, 0.00006103515625, 0.00004844363562, 0.00003844973907,
    0.00003051757813, 0.00002422181781, 0.00001922486954, 0.00001525878906,
    0.00001211090890, 0.00000961243477, 0.00000762939453, 0.00000605545445,
    0.00000480621738, 0.00000381469727, 0.00000302772723, 0.00000240310869,
    0.00000190734863, 0.00000151386361, 0.00000120155435, 0.0
};

/**************************************************************************
                      Common Tables for Layer III.
 *************************************************************************/

/*
   Purpose:     Width of scalefactor bands of short blocks.
   Explanation: - */
int16 sfb_width_table_[9][13] = {
    // MPEG-2
    { 4, 4, 4, 6, 6, 8, 10, 14, 18, 26, 32, 42, 18 },
    { 4, 4, 4, 6, 8, 10, 12, 14, 18, 24, 32, 44, 12 },
    { 4, 4, 4, 6, 8, 10, 12, 14, 18, 24, 30, 40, 18 },
    // MPEG-1
    { 4, 4, 4, 4, 6, 8, 10, 12, 14, 18, 22, 30, 56 },
    { 4, 4, 4, 4, 6, 6, 10, 12, 14, 16, 20, 26, 66 },
    { 4, 4, 4, 4, 6, 8, 12, 16, 20, 26, 34, 42, 12 },
    // MPEG-2.5
    { 4, 4, 4, 6, 8, 10, 12, 14, 18, 24, 30, 40, 18 },
    { 4, 4, 4, 6, 8, 10, 12, 14, 18, 24, 30, 40, 18 },
    { 8, 8, 8, 12, 16, 20, 24, 28, 36, 2, 2, 2, 26 }
};

/*
   Purpose:     Scalefactor band boundaries.
   Explanation: - */
SFBAND_DATA sfBandIndex[9] = {
    { // MPEG-2
      { 0,   6,   12,  18,  24,  30,  36,  44,  54,  66,  80, 96,
        116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576 },
      { 0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192 } }, // 22050 Hz
    { { 0,   6,   12,  18,  24,  30,  36,  44,  54,  66,  80, 96,
        114, 136, 162, 194, 232, 278, 330, 394, 464, 540, 576 },
      { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192 } }, // 24000 Hz
    { { 0,   6,   12,  18,  24,  30,  36,  44,  54,  66,  80, 96,
        116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576 },
      { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192 } }, // 16000 Hz
    {                                                                // MPEG-1
      { 0,  4,  8,   12,  16,  20,  24,  30,  36,  44,  52, 62,
        74, 90, 110, 134, 162, 196, 238, 288, 342, 418, 576 },
      { 0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192 } }, // 44100 Hz
    { { 0,  4,  8,   12,  16,  20,  24,  30,  36,  42,  50, 60,
        72, 88, 106, 128, 156, 190, 230, 276, 330, 384, 576 },
      { 0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192 } }, // 48000 Hz
    { { 0,  4,   8,   12,  16,  20,  24,  30,  36,  44,  54, 66,
        82, 102, 126, 156, 194, 240, 296, 364, 448, 550, 576 },
      { 0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192 } }, // 32000 Hz
    {                                                                // MPEG-2.5
      { 0,   6,   12,  18,  24,  30,  36,  44,  54,  66,  80, 96,
        116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576 },
      { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192 } }, // 11025 Hz
    { { 0,   6,   12,  18,  24,  30,  36,  44,  54,  66,  80, 96,
        116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576 },
      { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192 } }, // 12000 Hz
    { { 0,   12,  24,  36,  48,  60,  72,  88,  108, 132, 160, 192,
        232, 280, 336, 400, 476, 566, 568, 570, 572, 574, 576 },
      { 0, 8, 16, 24, 36, 52, 72, 96, 124, 160, 162, 164, 166, 192 } }
}; // 8000 Hz

/*
   Purpose:     Number of scalefactor bands for mixed blocks.
   Explanation: - */
int16 nsfb_mixed[9] = { 6, 6, 6, 8, 8, 8, 6, 6, 3 };
