/**************************************************************************
  layer1.cpp - MPEG-1/MPEG-2 LSF Layer I decoding subroutines.

  Author(s): Juha Ojanpera
  Copyright (c) 1998-1999 Juha Ojanpera.
  *************************************************************************/

/**************************************************************************
  External Objects Needed
  *************************************************************************/

/*-- Project Headers. --*/
#include "layer.h"
#include "mstream.h" // MP_Stream class

extern int16 sample_mask[];
extern uint32 sign_mask[];
extern FLOAT scale_factors[SBLIMIT << 1];


/**************************************************************************
  Internal Objects
  *************************************************************************/

/*
   Purpose:     Obtains the dequantized samples from precomputed tables.
   Explanation: - */
#define USE_LAYER_I_TABLES

/*
   Purpose:     Computes the dequantization tables.
   Explanation: - */
//#define GENERATE_TABLES


/**************************************************************************
  Title        : seek_layerI

  Purpose      : Reads one frame without processing the decoded parameters.

  Usage        : y = seek_layerI(mp)

  Input        : mp - MP1 stream parameters

  Explanation  : This function can be used to implement seeking of layer I.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
seek_layerI(MP_Stream *mp)
{
    I_decode_bit_alloc(mp);
    I_decode_scale(mp);

    for (int i = 0; i < SCALE_BLOCK; i++)
        I_buffer_sample(mp);
}


/**************************************************************************
  Title        : I_decode_bit_alloc

  Purpose      : Reads the bit allocation of Layer I from the bitstream.

  Usage        : I_decode_bit_alloc(mp)

  Input        : mp - MP1 stream parameters

  Explanation  : Each group of 12 samples per subband (only 1 group in layer I)
                 gets a bit allocation. Each bit allocation has a 4-bit
                 representation.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
I_decode_bit_alloc(MP_Stream *mp)
{
    static BYTE *bit_alloc, temp;
    static int i;
    static uint32 dword;

    bit_alloc = mp->frame->bit_alloc;

    i = 0;
    while (i<(mp->header->jsbound() * mp->header->channels())>> 2) {
        dword = mp->bs->getBits(16);
        *bit_alloc++ = (BYTE)(HIGHBYTE(LOWWORD(dword)) >> 4);
        *bit_alloc++ = (BYTE)(HIGHBYTE(LOWWORD(dword)) & 0x0000000F);
        *bit_alloc++ = (BYTE)(LOWBYTE(LOWWORD(dword)) >> 4);
        *bit_alloc++ = (BYTE)(LOWBYTE(LOWWORD(dword)) & 0x0000000F);
        i++;
    }

    switch (mp->header->mode()) {
        case MPG_MD_JOINT_STEREO:
            for (i = mp->header->jsbound(); i < SBLIMIT; i += 4) {
                dword = mp->bs->getBits(16);

                // left and right channel have the same bit allocation.
                temp = (BYTE)(HIGHBYTE(LOWWORD(dword)) >> 4);
                *bit_alloc++ = temp;
                *bit_alloc++ = temp;

                temp = (BYTE)(HIGHBYTE(LOWWORD(dword)) & 0x0000000F);
                *bit_alloc++ = temp;
                *bit_alloc++ = temp;

                temp = (BYTE)(LOWBYTE(LOWWORD(dword)) >> 4);
                *bit_alloc++ = temp;
                *bit_alloc++ = temp;

                temp = (BYTE)(LOWBYTE(LOWWORD(dword)) & 0x0000000F);
                *bit_alloc++ = temp;
                *bit_alloc++ = temp;
            }
            break;
    }
}


/**************************************************************************
  Title        : I_decode_scale

  Purpose      : Reads the scale factors of Layer I from the bitstream.

  Usage        : I_decode_scale(mp)

  Input        : mp - MP1 stream parameters

  Explanation  : Each group of 12 samples per subband gets a scale factor
                 if the bit allocation is not zero. The scale factor is a
                 multiplier that sizes the subband samples to fully use the
                 range of the quantizer. Each scale factor has a 6-bit
                 representation.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
I_decode_scale(MP_Stream *mp)
{
    static BYTE *bit_alloc, *scale_factor;
    static int i;

    bit_alloc = mp->frame->bit_alloc;
    scale_factor = mp->frame->scale_factors;

    i = 0;
    while (i < SBLIMIT << (mp->header->channels() - 1)) {
        *scale_factor++ =
            (BYTE)((!(*bit_alloc++)) ? (SCALE_RANGE - 1) : mp->bs->getBits(6));
        i++;
    }
}


/**************************************************************************
  Title        : I_buffer_sample

  Purpose      : Reads the quantized subband coefficients of Layer I from
                 the bit stream.

  Usage        : I_buffer_sample(mp)

  Input        : mp - MP1 stream parameters

  Explanation  : The bit allocation tells the number of bits used to represent
                 each quantized subband coefficients.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
I_buffer_sample(MP_Stream *mp)
{
    static BYTE *bit_alloc;
    static int16 *quant, sample;
    static int i;

    bit_alloc = mp->frame->bit_alloc;
    quant = mp->frame->quant;

    i = 0;
    while (i < mp->header->jsbound() << (mp->header->channels() - 1)) {
        *quant++ = (int16)((*bit_alloc) ? mp->bs->getBits(*bit_alloc + 1) : 0);
        bit_alloc++;
        i++;
    }

    switch (mp->header->mode()) {
        case MPG_MD_JOINT_STEREO:
            for (i = mp->header->jsbound(); i < SBLIMIT; i++) {
                sample = (int16)((*bit_alloc) ? mp->bs->getBits(*bit_alloc + 1) : 0);
                bit_alloc += 2;

                // left and right samples sent as one sample.
                *quant++ = sample;
                *quant++ = sample;
            }
            break;
    }
}


/*
   Purpose:     (1 / 2^b ) * (2^(b+1) / (2^(b+1))-1)), b = 0,...,15
   Explanation: - */
FLOAT scaleI[2][16] = {
    { 0, 1. / 2 * 4. / 3, 1. / 4 * 8. / 7, 1. / 8 * 16. / 15, 1. / 16 * 32. / 31,
      1. / 32 * 64. / 63, 1. / 64 * 128. / 127, 1. / 128 * 256. / 255,
      1. / 256 * 512. / 511, 1. / 512 * 1024. / 1023, 1. / 1024 * 2048. / 2047,
      1. / 2048 * 4096. / 4095, 1. / 4096 * 8192. / 8191, 1. / 8192 * 16384. / 16383,
      1. / 16384 * 32768. / 32767, 1. / 32768L * 65536. / 65535L },
    /*
       Purpose:     (1 / 2^b ) * (2^(b+1) / (2^(b+1))-1)) - 1.0, b = 0,...,15
       Explanation: - */
    { 0, 1. / 2 * 4. / 3 - 1.0, 1. / 4 * 8. / 7 - 1.0, 1. / 8 * 16. / 15 - 1.0,
      1. / 16 * 32. / 31 - 1.0, 1. / 32 * 64. / 63 - 1.0, 1. / 64 * 128. / 127 - 1.0,
      1. / 128 * 256. / 255 - 1.0, 1. / 256 * 512. / 511 - 1.0,
      1. / 512 * 1024. / 1023 - 1.0, 1. / 1024 * 2048. / 2047 - 1.0,
      1. / 2048 * 4096. / 4095 - 1.0, 1. / 4096 * 8192. / 8191 - 1.0,
      1. / 8192 * 16384. / 16383 - 1.0, 1. / 16384 * 32768. / 32768L - 1.0,
      1. / 32768L * 65536. / 65535L - 1.0 }
};


/*
   Purpose:     Table to deinterleave left and right channel of Layer I.
   Explanation: - */
static BYTE deinterleave_Layer_I[2][64] = {
    // no deinterleaving needed for mono channel
    { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  19, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
      32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 },
    // stereo channel
    { 0,  32, 1,  33, 2,  34, 3,  35, 4,  36, 5,  37, 6,  38, 7,  39,
      8,  40, 9,  41, 10, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47,
      16, 48, 17, 49, 18, 50, 19, 51, 20, 52, 21, 53, 22, 54, 23, 55,
      24, 56, 25, 57, 26, 58, 27, 59, 28, 60, 29, 61, 30, 62, 31, 63 }
};

#ifdef USE_LAYER_I_TABLES

/*
   Purpose:     Following tables contain dequantized samples for each
                legal codeword.
   Explanation: Only bit allocations 1...9 are stored in the tables. */

// Bit_Alloc : 1
static FLOAT requant1[] = { -0.3333333135, 0.3333333731, 0.6666666865, 1.3333333731 };

// Bit_Alloc : 2
static FLOAT requant2[] = { -0.7142857313, -0.4285714328, -0.1428571045, 0.1428571939,
                            0.2857142985,  0.5714285970,  0.8571429253,  1.1428571939 };

// Bit_Alloc : 3
static FLOAT requant3[] = { -0.8666666746, -0.7333333492, -0.6000000238, -0.4666666389,
                            -0.3333333135, -0.1999999732, -0.0666666180, 0.0666667223,
                            0.1333333403,  0.2666666806,  0.4000000358,  0.5333333611,
                            0.6666666865,  0.8000000119,  0.9333333969,  1.0666667223 };

// Bit_Alloc : 4
static FLOAT requant4[] = { -0.9354838729, -0.8709677458, -0.8064516187, -0.7419354916,
                            -0.6774193645, -0.6129032373, -0.5483871102, -0.4838709831,
                            -0.4193548560, -0.3548387289, -0.2903226018, -0.2258064747,
                            -0.1612903476, -0.0967742205, -0.0322580934, 0.0322580338,
                            0.0645161271,  0.1290322542,  0.1935483813,  0.2580645084,
                            0.3225806355,  0.3870967627,  0.4516128898,  0.5161290169,
                            0.5806451440,  0.6451612711,  0.7096773982,  0.7741935253,
                            0.8387096524,  0.9032257795,  0.9677419066,  1.0322580338 };

// Bit_Alloc : 5
static FLOAT requant5[] = {
    -0.9682539701, -0.9365079403, -0.9047619104, -0.8730158806, -0.8412698507,
    -0.8095238209, -0.7777777910, -0.7460317612, -0.7142857313, -0.6825396419,
    -0.6507936120, -0.6190475821, -0.5873015523, -0.5555555224, -0.5238094926,
    -0.4920634627, -0.4603174329, -0.4285714030, -0.3968253732, -0.3650793433,
    -0.3333333135, -0.3015872538, -0.2698412240, -0.2380951941, -0.2063491642,
    -0.1746031344, -0.1428571045, -0.1111110598, -0.0793650299, -0.0476189964,
    -0.0158729590, 0.0158730745,  0.0317460336,  0.0634920672,  0.0952381045,
    0.1269841343,  0.1587301642,  0.1904761940,  0.2222222388,  0.2539682686,
    0.2857142985,  0.3174603283,  0.3492063582,  0.3809523880,  0.4126984477,
    0.4444444776,  0.4761905074,  0.5079365373,  0.5396825671,  0.5714285970,
    0.6031746268,  0.6349206567,  0.6666666865,  0.6984127164,  0.7301587462,
    0.7619047761,  0.7936508656,  0.8253968954,  0.8571429253,  0.8888889551,
    0.9206349850,  0.9523810148,  0.9841270447,  1.0158730745
};

// Bit_Alloc : 6
static FLOAT requant6[] = {
    -0.9842519760, -0.9685039520, -0.9527559280, -0.9370079041, -0.9212598801,
    -0.9055117965, -0.8897637725, -0.8740157485, -0.8582677245, -0.8425197005,
    -0.8267716765, -0.8110236526, -0.7952755690, -0.7795275450, -0.7637795210,
    -0.7480314970, -0.7322834730, -0.7165354490, -0.7007874250, -0.6850394011,
    -0.6692913771, -0.6535432935, -0.6377952695, -0.6220472455, -0.6062992215,
    -0.5905511975, -0.5748031735, -0.5590551496, -0.5433070660, -0.5275590420,
    -0.5118110180, -0.4960629940, -0.4803149700, -0.4645669460, -0.4488189220,
    -0.4330708683, -0.4173228443, -0.4015748203, -0.3858267665, -0.3700787425,
    -0.3543307185, -0.3385826945, -0.3228346705, -0.3070866168, -0.2913385928,
    -0.2755905688, -0.2598425150, -0.2440944910, -0.2283464670, -0.2125984430,
    -0.1968503892, -0.1811023653, -0.1653543413, -0.1496063173, -0.1338582635,
    -0.1181102321, -0.1023622081, -0.0866141766, -0.0708661452, -0.0551181138,
    -0.0393700823, -0.0236220509, -0.0078740194, 0.0078740120,  0.0157480314,
    0.0314960629,  0.0472440943,  0.0629921257,  0.0787401572,  0.0944881886,
    0.1102362201,  0.1259842515,  0.1417322755,  0.1574802995,  0.1732283533,
    0.1889763772,  0.2047244012,  0.2204724252,  0.2362204790,  0.2519685030,
    0.2677165270,  0.2834645510,  0.2992125750,  0.3149606287,  0.3307086527,
    0.3464566767,  0.3622047305,  0.3779527545,  0.3937007785,  0.4094488025,
    0.4251968265,  0.4409448802,  0.4566929042,  0.4724409282,  0.4881889820,
    0.5039370060,  0.5196850300,  0.5354330540,  0.5511810780,  0.5669291019,
    0.5826771259,  0.5984252095,  0.6141732335,  0.6299212575,  0.6456692815,
    0.6614173055,  0.6771653295,  0.6929133534,  0.7086614370,  0.7244094610,
    0.7401574850,  0.7559055090,  0.7716535330,  0.7874015570,  0.8031495810,
    0.8188976049,  0.8346456289,  0.8503937125,  0.8661417365,  0.8818897605,
    0.8976377845,  0.9133858085,  0.9291338325,  0.9448818564,  0.9606299400,
    0.9763779640,  0.9921259880,  1.0078740120
};

// Bit_Alloc : 7
static FLOAT requant7[] = {
    -0.9921568632, -0.9843137264, -0.9764705896, -0.9686274529, -0.9607843161,
    -0.9529411793, -0.9450980425, -0.9372549057, -0.9294117689, -0.9215686321,
    -0.9137254953, -0.9058823586, -0.8980392218, -0.8901960850, -0.8823529482,
    -0.8745098114, -0.8666666746, -0.8588235378, -0.8509804010, -0.8431372643,
    -0.8352941275, -0.8274509907, -0.8196078539, -0.8117647171, -0.8039215803,
    -0.7960784435, -0.7882353067, -0.7803921700, -0.7725490332, -0.7647058964,
    -0.7568627596, -0.7490196228, -0.7411764860, -0.7333332896, -0.7254901528,
    -0.7176470160, -0.7098038793, -0.7019607425, -0.6941176057, -0.6862744689,
    -0.6784313321, -0.6705881953, -0.6627450585, -0.6549019217, -0.6470587850,
    -0.6392156482, -0.6313725114, -0.6235293746, -0.6156862378, -0.6078431010,
    -0.5999999642, -0.5921568274, -0.5843136907, -0.5764705539, -0.5686274171,
    -0.5607842803, -0.5529411435, -0.5450980067, -0.5372548699, -0.5294117332,
    -0.5215685964, -0.5137254596, -0.5058823228, -0.4980391860, -0.4901960492,
    -0.4823529124, -0.4745097756, -0.4666666389, -0.4588235021, -0.4509803653,
    -0.4431372285, -0.4352940917, -0.4274509549, -0.4196078181, -0.4117646813,
    -0.4039215446, -0.3960784078, -0.3882352710, -0.3803921342, -0.3725489974,
    -0.3647058606, -0.3568626940, -0.3490195572, -0.3411764205, -0.3333332837,
    -0.3254901469, -0.3176470101, -0.3098038733, -0.3019607365, -0.2941175997,
    -0.2862744629, -0.2784313262, -0.2705881894, -0.2627450526, -0.2549019158,
    -0.2470587790, -0.2392156422, -0.2313725054, -0.2235293686, -0.2156862319,
    -0.2078430951, -0.1999999583, -0.1921568215, -0.1843136847, -0.1764705479,
    -0.1686273962, -0.1607842594, -0.1529411227, -0.1450979859, -0.1372548491,
    -0.1294117123, -0.1215685755, -0.1137254387, -0.1058823019, -0.0980391651,
    -0.0901960284, -0.0823528916, -0.0745097473, -0.0666666105, -0.0588234738,
    -0.0509803370, -0.0431372002, -0.0352940634, -0.0274509229, -0.0196077861,
    -0.0117646484, -0.0039215097, 0.0039216280,  0.0078431377,  0.0156862754,
    0.0235294141,  0.0313725509,  0.0392156877,  0.0470588244,  0.0549019650,
    0.0627451017,  0.0705882385,  0.0784313753,  0.0862745121,  0.0941176489,
    0.1019607931,  0.1098039299,  0.1176470667,  0.1254902035,  0.1333333403,
    0.1411764771,  0.1490196139,  0.1568627506,  0.1647058874,  0.1725490242,
    0.1803921610,  0.1882352978,  0.1960784495,  0.2039215863,  0.2117647231,
    0.2196078598,  0.2274509966,  0.2352941334,  0.2431372702,  0.2509804070,
    0.2588235438,  0.2666666806,  0.2745098174,  0.2823529541,  0.2901960909,
    0.2980392277,  0.3058823645,  0.3137255013,  0.3215686381,  0.3294117749,
    0.3372549117,  0.3450980484,  0.3529411852,  0.3607843220,  0.3686274588,
    0.3764705956,  0.3843137622,  0.3921568990,  0.4000000358,  0.4078431726,
    0.4156863093,  0.4235294461,  0.4313725829,  0.4392157197,  0.4470588565,
    0.4549019933,  0.4627451301,  0.4705882668,  0.4784314036,  0.4862745404,
    0.4941176772,  0.5019608140,  0.5098039508,  0.5176470876,  0.5254902244,
    0.5333333611,  0.5411764979,  0.5490196347,  0.5568627715,  0.5647059083,
    0.5725490451,  0.5803921819,  0.5882353187,  0.5960784554,  0.6039215922,
    0.6117647290,  0.6196078658,  0.6274510026,  0.6352941394,  0.6431372762,
    0.6509804130,  0.6588235497,  0.6666666865,  0.6745098233,  0.6823529601,
    0.6901960969,  0.6980392337,  0.7058823705,  0.7137255073,  0.7215686440,
    0.7294117808,  0.7372549176,  0.7450980544,  0.7529411912,  0.7607843876,
    0.7686275244,  0.7764706612,  0.7843137980,  0.7921569347,  0.8000000715,
    0.8078432083,  0.8156863451,  0.8235294819,  0.8313726187,  0.8392157555,
    0.8470588923,  0.8549020290,  0.8627451658,  0.8705883026,  0.8784314394,
    0.8862745762,  0.8941177130,  0.9019608498,  0.9098039865,  0.9176471233,
    0.9254902601,  0.9333333969,  0.9411765337,  0.9490196705,  0.9568628073,
    0.9647059441,  0.9725490808,  0.9803922176,  0.9882353544,  0.9960784912,
    1.0039216280
};

// Bit_Alloc : 8
static FLOAT requant8[] = {
    -0.9960861206, -0.9921722412, -0.9882583618, -0.9843444228, -0.9804305434,
    -0.9765166640, -0.9726027250, -0.9686888456, -0.9647749662, -0.9608610868,
    -0.9569472075, -0.9530332685, -0.9491193891, -0.9452055097, -0.9412915707,
    -0.9373776913, -0.9334638119, -0.9295499325, -0.9256360531, -0.9217221141,
    -0.9178082347, -0.9138943553, -0.9099804163, -0.9060665369, -0.9021526575,
    -0.8982387781, -0.8943248987, -0.8904109597, -0.8864970803, -0.8825832009,
    -0.8786692619, -0.8747553825, -0.8708415031, -0.8669276237, -0.8630137444,
    -0.8590998054, -0.8551859260, -0.8512720466, -0.8473581076, -0.8434442282,
    -0.8395303488, -0.8356164694, -0.8317025900, -0.8277886510, -0.8238747716,
    -0.8199608922, -0.8160469532, -0.8121330738, -0.8082191944, -0.8043053150,
    -0.8003914356, -0.7964774966, -0.7925636172, -0.7886497378, -0.7847357988,
    -0.7808219194, -0.7769080400, -0.7729941607, -0.7690802813, -0.7651663423,
    -0.7612524629, -0.7573385835, -0.7534246445, -0.7495107651, -0.7455968857,
    -0.7416830063, -0.7377691269, -0.7338551879, -0.7299413085, -0.7260274291,
    -0.7221134901, -0.7181996107, -0.7142857313, -0.7103718519, -0.7064579725,
    -0.7025440335, -0.6986301541, -0.6947162747, -0.6908023357, -0.6868884563,
    -0.6829745770, -0.6790606976, -0.6751468182, -0.6712328792, -0.6673189998,
    -0.6634051204, -0.6594911814, -0.6555773020, -0.6516634226, -0.6477495432,
    -0.6438356638, -0.6399217248, -0.6360078454, -0.6320939660, -0.6281800270,
    -0.6242661476, -0.6203522682, -0.6164383888, -0.6125245094, -0.6086105704,
    -0.6046966910, -0.6007828116, -0.5968688726, -0.5929549932, -0.5890411139,
    -0.5851272345, -0.5812133551, -0.5772994161, -0.5733855367, -0.5694716573,
    -0.5655577183, -0.5616438389, -0.5577299595, -0.5538160801, -0.5499022007,
    -0.5459882617, -0.5420743823, -0.5381605029, -0.5342465639, -0.5303326845,
    -0.5264188051, -0.5225049257, -0.5185910463, -0.5146771073, -0.5107632279,
    -0.5068493485, -0.5029354095, -0.4990215302, -0.4951076508, -0.4911937714,
    -0.4872798324, -0.4833659530, -0.4794520736, -0.4755381942, -0.4716242552,
    -0.4677103758, -0.4637964964, -0.4598826170, -0.4559686780, -0.4520547986,
    -0.4481409192, -0.4442270398, -0.4403131008, -0.4363992214, -0.4324853420,
    -0.4285714626, -0.4246575236, -0.4207436442, -0.4168297648, -0.4129158854,
    -0.4090019464, -0.4050880671, -0.4011741877, -0.3972603083, -0.3933463693,
    -0.3894324899, -0.3855186105, -0.3816047311, -0.3776907921, -0.3737769127,
    -0.3698630333, -0.3659491539, -0.3620352149, -0.3581213355, -0.3542074561,
    -0.3502935767, -0.3463796377, -0.3424657583, -0.3385518789, -0.3346379995,
    -0.3307240605, -0.3268101811, -0.3228963017, -0.3189824224, -0.3150684834,
    -0.3111546040, -0.3072407246, -0.3033268452, -0.2994129062, -0.2954990268,
    -0.2915851474, -0.2876712680, -0.2837573290, -0.2798434496, -0.2759295702,
    -0.2720156908, -0.2681017518, -0.2641878724, -0.2602739930, -0.2563601136,
    -0.2524461746, -0.2485322803, -0.2446184009, -0.2407045066, -0.2367906123,
    -0.2328767180, -0.2289628237, -0.2250489295, -0.2211350352, -0.2172211409,
    -0.2133072466, -0.2093933523, -0.2054794580, -0.2015655637, -0.1976516694,
    -0.1937377751, -0.1898238808, -0.1859099865, -0.1819960922, -0.1780821979,
    -0.1741683036, -0.1702544093, -0.1663405150, -0.1624266207, -0.1585127264,
    -0.1545988321, -0.1506849378, -0.1467710435, -0.1428571492, -0.1389432549,
    -0.1350293607, -0.1311154664, -0.1272015721, -0.1232876778, -0.1193737835,
    -0.1154598892, -0.1115459949, -0.1076321006, -0.1037182063, -0.0998043120,
    -0.0958904177, -0.0919765234, -0.0880626291, -0.0841487348, -0.0802348405,
    -0.0763209462, -0.0724070519, -0.0684931576, -0.0645792633, -0.0606653690,
    -0.0567514747, -0.0528375804, -0.0489236861, -0.0450097919, -0.0410958976,
    -0.0371820033, -0.0332681090, -0.0293542147, -0.0254403204, -0.0215264261,
    -0.0176125318, -0.0136986375, -0.0097847432, -0.0058708489, -0.0019569546,
    0.0019569397,  0.0039138943,  0.0078277886,  0.0117416829,  0.0156555772,
    0.0195694715,  0.0234833658,  0.0273972601,  0.0313111544,  0.0352250487,
    0.0391389430,  0.0430528373,  0.0469667315,  0.0508806258,  0.0547945201,
    0.0587084144,  0.0626223087,  0.0665362030,  0.0704500973,  0.0743639916,
    0.0782778859,  0.0821917802,  0.0861056745,  0.0900195688,  0.0939334631,
    0.0978473574,  0.1017612517,  0.1056751460,  0.1095890403,  0.1135029346,
    0.1174168289,  0.1213307232,  0.1252446175,  0.1291585118,  0.1330724061,
    0.1369863003,  0.1409001946,  0.1448140889,  0.1487279832,  0.1526418775,
    0.1565557718,  0.1604696661,  0.1643835604,  0.1682974547,  0.1722113490,
    0.1761252433,  0.1800391376,  0.1839530319,  0.1878669262,  0.1917808205,
    0.1956947148,  0.1996086091,  0.2035225034,  0.2074363977,  0.2113502920,
    0.2152641863,  0.2191780806,  0.2230919749,  0.2270058692,  0.2309197634,
    0.2348336577,  0.2387475520,  0.2426614463,  0.2465753406,  0.2504892349,
    0.2544031143,  0.2583169937,  0.2622309327,  0.2661448121,  0.2700586915,
    0.2739725709,  0.2778865099,  0.2818003893,  0.2857142687,  0.2896281481,
    0.2935420871,  0.2974559665,  0.3013698459,  0.3052837253,  0.3091976643,
    0.3131115437,  0.3170254230,  0.3209393024,  0.3248532414,  0.3287671208,
    0.3326810002,  0.3365948796,  0.3405088186,  0.3444226980,  0.3483365774,
    0.3522504568,  0.3561643958,  0.3600782752,  0.3639921546,  0.3679060340,
    0.3718199730,  0.3757338524,  0.3796477318,  0.3835616112,  0.3874755502,
    0.3913894296,  0.3953033090,  0.3992171884,  0.4031311274,  0.4070450068,
    0.4109588861,  0.4148727655,  0.4187867045,  0.4227005839,  0.4266144633,
    0.4305283427,  0.4344422817,  0.4383561611,  0.4422700405,  0.4461839199,
    0.4500978589,  0.4540117383,  0.4579256177,  0.4618394971,  0.4657534361,
    0.4696673155,  0.4735811949,  0.4774950743,  0.4814090133,  0.4853228927,
    0.4892367721,  0.4931506515,  0.4970645905,  0.5009784698,  0.5048923492,
    0.5088062286,  0.5127201080,  0.5166340470,  0.5205479264,  0.5244618058,
    0.5283757448,  0.5322896242,  0.5362035036,  0.5401173830,  0.5440312624,
    0.5479452014,  0.5518590808,  0.5557729602,  0.5596868992,  0.5636007786,
    0.5675146580,  0.5714285374,  0.5753424168,  0.5792563558,  0.5831702352,
    0.5870841146,  0.5909980536,  0.5949119329,  0.5988258123,  0.6027396917,
    0.6066535711,  0.6105675101,  0.6144813895,  0.6183952689,  0.6223092079,
    0.6262230873,  0.6301369667,  0.6340508461,  0.6379647255,  0.6418786645,
    0.6457925439,  0.6497064233,  0.6536203623,  0.6575342417,  0.6614481211,
    0.6653620005,  0.6692758799,  0.6731898189,  0.6771036983,  0.6810175776,
    0.6849315166,  0.6888453960,  0.6927592754,  0.6966731548,  0.7005870342,
    0.7045009732,  0.7084148526,  0.7123287320,  0.7162426710,  0.7201565504,
    0.7240704298,  0.7279843092,  0.7318981886,  0.7358121276,  0.7397260070,
    0.7436398864,  0.7475538254,  0.7514677048,  0.7553815842,  0.7592954636,
    0.7632093430,  0.7671232820,  0.7710371614,  0.7749510407,  0.7788649797,
    0.7827788591,  0.7866927385,  0.7906066179,  0.7945204973,  0.7984344363,
    0.8023483157,  0.8062621951,  0.8101761341,  0.8140900135,  0.8180038929,
    0.8219177723,  0.8258316517,  0.8297455907,  0.8336594701,  0.8375733495,
    0.8414872885,  0.8454011679,  0.8493150473,  0.8532289267,  0.8571428061,
    0.8610567451,  0.8649706244,  0.8688845038,  0.8727984428,  0.8767123222,
    0.8806262016,  0.8845400810,  0.8884539604,  0.8923678994,  0.8962817788,
    0.9001956582,  0.9041095972,  0.9080234766,  0.9119373560,  0.9158512354,
    0.9197651148,  0.9236790538,  0.9275929332,  0.9315068126,  0.9354207516,
    0.9393346310,  0.9432485104,  0.9471623898,  0.9510762691,  0.9549902081,
    0.9589040875,  0.9628179669,  0.9667319059,  0.9706457853,  0.9745596647,
    0.9784735441,  0.9823874235,  0.9863013625,  0.9902152419,  0.9941291213,
    0.9980430603,  1.0019569397
};

// Bit_Alloc : 9
static FLOAT requant9[] = {
    -0.9980449677, -0.9960899353, -0.9941349030, -0.9921798706, -0.9902248383,
    -0.9882698059, -0.9863147736, -0.9843597412, -0.9824047089, -0.9804496765,
    -0.9784946442, -0.9765396118, -0.9745845795, -0.9726295471, -0.9706745148,
    -0.9687194824, -0.9667644501, -0.9648093581, -0.9628543258, -0.9608992934,
    -0.9589442611, -0.9569892287, -0.9550341964, -0.9530791640, -0.9511241317,
    -0.9491690993, -0.9472140670, -0.9452590346, -0.9433040023, -0.9413489699,
    -0.9393939376, -0.9374389052, -0.9354838729, -0.9335288405, -0.9315738082,
    -0.9296187758, -0.9276637435, -0.9257087111, -0.9237536788, -0.9217986465,
    -0.9198436141, -0.9178885818, -0.9159335494, -0.9139785171, -0.9120234847,
    -0.9100684524, -0.9081134200, -0.9061583877, -0.9042032957, -0.9022482634,
    -0.9002932310, -0.8983381987, -0.8963831663, -0.8944281340, -0.8924731016,
    -0.8905180693, -0.8885630369, -0.8866080046, -0.8846529722, -0.8826979399,
    -0.8807429075, -0.8787878752, -0.8768328428, -0.8748778105, -0.8729227781,
    -0.8709677458, -0.8690127134, -0.8670576811, -0.8651026487, -0.8631476164,
    -0.8611925840, -0.8592375517, -0.8572825193, -0.8553274870, -0.8533724546,
    -0.8514174223, -0.8494623899, -0.8475073576, -0.8455523252, -0.8435972929,
    -0.8416422606, -0.8396871686, -0.8377321362, -0.8357771039, -0.8338220716,
    -0.8318670392, -0.8299120069, -0.8279569745, -0.8260019422, -0.8240469098,
    -0.8220918775, -0.8201368451, -0.8181818128, -0.8162267804, -0.8142717481,
    -0.8123167157, -0.8103616834, -0.8084066510, -0.8064516187, -0.8044965863,
    -0.8025415540, -0.8005865216, -0.7986314893, -0.7966764569, -0.7947214246,
    -0.7927663922, -0.7908113599, -0.7888563275, -0.7869012952, -0.7849462628,
    -0.7829912305, -0.7810361981, -0.7790811062, -0.7771260738, -0.7751710415,
    -0.7732160091, -0.7712609768, -0.7693059444, -0.7673509121, -0.7653958797,
    -0.7634408474, -0.7614858150, -0.7595307827, -0.7575757504, -0.7556207180,
    -0.7536656857, -0.7517106533, -0.7497556210, -0.7478005886, -0.7458455563,
    -0.7438905239, -0.7419354916, -0.7399804592, -0.7380254269, -0.7360703945,
    -0.7341153622, -0.7321603298, -0.7302052975, -0.7282502651, -0.7262952328,
    -0.7243402004, -0.7223851681, -0.7204301357, -0.7184751034, -0.7165200710,
    -0.7145649791, -0.7126099467, -0.7106549144, -0.7086998820, -0.7067448497,
    -0.7047898173, -0.7028347850, -0.7008797526, -0.6989247203, -0.6969696879,
    -0.6950146556, -0.6930596232, -0.6911045909, -0.6891495585, -0.6871945262,
    -0.6852394938, -0.6832844615, -0.6813294291, -0.6793743968, -0.6774193645,
    -0.6754643321, -0.6735092998, -0.6715542674, -0.6695992351, -0.6676442027,
    -0.6656891704, -0.6637341380, -0.6617791057, -0.6598240733, -0.6578690410,
    -0.6559140086, -0.6539589167, -0.6520038843, -0.6500488520, -0.6480938196,
    -0.6461387873, -0.6441837549, -0.6422287226, -0.6402736902, -0.6383186579,
    -0.6363636255, -0.6344085932, -0.6324535608, -0.6304985285, -0.6285434961,
    -0.6265884638, -0.6246334314, -0.6226783991, -0.6207233667, -0.6187683344,
    -0.6168133020, -0.6148582697, -0.6129032373, -0.6109482050, -0.6089931726,
    -0.6070381403, -0.6050831079, -0.6031280756, -0.6011730433, -0.5992180109,
    -0.5972629786, -0.5953079462, -0.5933529139, -0.5913978815, -0.5894427896,
    -0.5874877572, -0.5855327249, -0.5835776925, -0.5816226602, -0.5796676278,
    -0.5777125955, -0.5757575631, -0.5738025308, -0.5718474984, -0.5698924661,
    -0.5679374337, -0.5659824014, -0.5640273690, -0.5620723367, -0.5601173043,
    -0.5581622720, -0.5562072396, -0.5542522073, -0.5522971749, -0.5503421426,
    -0.5483871102, -0.5464320779, -0.5444770455, -0.5425220132, -0.5405669808,
    -0.5386119485, -0.5366569161, -0.5347018838, -0.5327468514, -0.5307918191,
    -0.5288367271, -0.5268816948, -0.5249266624, -0.5229716301, -0.5210165977,
    -0.5190615654, -0.5171065331, -0.5151515007, -0.5131964684, -0.5112414360,
    -0.5092864037, -0.5073313713, -0.5053763390, -0.5034213066, -0.5014662743,
    -0.4995112419, -0.4975562096, -0.4956011772, -0.4936461449, -0.4916911125,
    -0.4897360802, -0.4877810478, -0.4858260155, -0.4838709831, -0.4819159508,
    -0.4799608886, -0.4780058563, -0.4760508239, -0.4740957916, -0.4721407592,
    -0.4701857269, -0.4682306945, -0.4662756622, -0.4643206298, -0.4623655975,
    -0.4604105651, -0.4584555328, -0.4565005004, -0.4545454681, -0.4525904357,
    -0.4506353736, -0.4486803412, -0.4467253089, -0.4447702765, -0.4428152442,
    -0.4408602118, -0.4389051795, -0.4369501472, -0.4349951148, -0.4330400825,
    -0.4310850501, -0.4291300178, -0.4271749854, -0.4252199531, -0.4232649207,
    -0.4213098884, -0.4193548560, -0.4173997939, -0.4154447615, -0.4134897292,
    -0.4115346968, -0.4095796645, -0.4076246321, -0.4056695998, -0.4037145674,
    -0.4017595351, -0.3998045027, -0.3978494704, -0.3958944380, -0.3939394057,
    -0.3919843733, -0.3900293410, -0.3880742788, -0.3861192465, -0.3841642141,
    -0.3822091818, -0.3802541494, -0.3782991171, -0.3763440847, -0.3743890524,
    -0.3724340200, -0.3704789877, -0.3685239553, -0.3665689230, -0.3646138906,
    -0.3626588583, -0.3607038260, -0.3587487936, -0.3567937613, -0.3548386991,
    -0.3528836668, -0.3509286344, -0.3489736021, -0.3470185697, -0.3450635374,
    -0.3431085050, -0.3411534727, -0.3391984403, -0.3372434080, -0.3352883756,
    -0.3333333433, -0.3313783109, -0.3294232786, -0.3274682462, -0.3255131841,
    -0.3235581517, -0.3216031194, -0.3196480870, -0.3176930547, -0.3157380223,
    -0.3137829900, -0.3118279576, -0.3098729253, -0.3079178929, -0.3059628606,
    -0.3040078282, -0.3020527959, -0.3000977635, -0.2981427312, -0.2961876988,
    -0.2942326665, -0.2922776043, -0.2903225720, -0.2883675396, -0.2864125073,
    -0.2844574749, -0.2825024426, -0.2805474102, -0.2785923779, -0.2766373456,
    -0.2746823132, -0.2727272809, -0.2707722485, -0.2688172162, -0.2668621838,
    -0.2649071515, -0.2629520893, -0.2609970570, -0.2590420246, -0.2570869923,
    -0.2551319599, -0.2531769276, -0.2512218952, -0.2492668629, -0.2473118305,
    -0.2453567982, -0.2434017658, -0.2414467335, -0.2394917011, -0.2375366539,
    -0.2355816215, -0.2336265892, -0.2316715568, -0.2297165245, -0.2277614921,
    -0.2258064598, -0.2238514125, -0.2218963802, -0.2199413478, -0.2179863155,
    -0.2160312831, -0.2140762508, -0.2121212184, -0.2101661861, -0.2082111537,
    -0.2062561065, -0.2043010741, -0.2023460418, -0.2003910094, -0.1984359771,
    -0.1964809448, -0.1945259124, -0.1925708652, -0.1906158328, -0.1886608005,
    -0.1867057681, -0.1847507358, -0.1827957034, -0.1808406711, -0.1788856387,
    -0.1769306064, -0.1749755591, -0.1730205268, -0.1710654944, -0.1691104621,
    -0.1671554297, -0.1652003974, -0.1632453650, -0.1612903178, -0.1593352854,
    -0.1573802531, -0.1554252207, -0.1534701884, -0.1515151560, -0.1495601237,
    -0.1476050913, -0.1456500590, -0.1436950117, -0.1417399794, -0.1397849470,
    -0.1378299147, -0.1358748823, -0.1339198500, -0.1319648176, -0.1300097704,
    -0.1280547380, -0.1260997057, -0.1241446733, -0.1221896410, -0.1202346087,
    -0.1182795763, -0.1163245365, -0.1143695042, -0.1124144718, -0.1104594320,
    -0.1085043997, -0.1065493673, -0.1045943350, -0.1026393026, -0.1006842628,
    -0.0987292305, -0.0967741981, -0.0948191583, -0.0928641260, -0.0909090936,
    -0.0889540613, -0.0869990289, -0.0850439891, -0.0830889568, -0.0811339244,
    -0.0791788846, -0.0772238523, -0.0752688199, -0.0733137876, -0.0713587552,
    -0.0694037154, -0.0674486831, -0.0654936507, -0.0635386109, -0.0615835786,
    -0.0596285462, -0.0576735139, -0.0557184741, -0.0537634417, -0.0518084094,
    -0.0498533770, -0.0478983372, -0.0459433049, -0.0439882725, -0.0420332402,
    -0.0400782004, -0.0381231681, -0.0361681357, -0.0342131034, -0.0322580636,
    -0.0303030293, -0.0283479970, -0.0263929628, -0.0244379286, -0.0224828944,
    -0.0205278601, -0.0185728259, -0.0166177917, -0.0146627575, -0.0127077233,
    -0.0107526891, -0.0087976549, -0.0068426207, -0.0048875865, -0.0029325522,
    -0.0009775180, 0.0009775162,  0.0019550342,  0.0039100684,  0.0058651026,
    0.0078201368,  0.0097751711,  0.0117302053,  0.0136852395,  0.0156402737,
    0.0175953079,  0.0195503421,  0.0215053763,  0.0234604105,  0.0254154447,
    0.0273704790,  0.0293255132,  0.0312805474,  0.0332355797,  0.0351906121,
    0.0371456519,  0.0391006842,  0.0410557166,  0.0430107489,  0.0449657887,
    0.0469208211,  0.0488758534,  0.0508308858,  0.0527859256,  0.0547409579,
    0.0566959903,  0.0586510226,  0.0606060624,  0.0625610948,  0.0645161271,
    0.0664711595,  0.0684261918,  0.0703812316,  0.0723362640,  0.0742912963,
    0.0762463361,  0.0782013685,  0.0801564008,  0.0821114331,  0.0840664655,
    0.0860215053,  0.0879765376,  0.0899315700,  0.0918866098,  0.0938416421,
    0.0957966745,  0.0977517068,  0.0997067392,  0.1016617790,  0.1036168113,
    0.1055718437,  0.1075268835,  0.1094819158,  0.1114369482,  0.1133919805,
    0.1153470129,  0.1173020527,  0.1192570850,  0.1212121174,  0.1231671572,
    0.1251221895,  0.1270772219,  0.1290322542,  0.1309872866,  0.1329423189,
    0.1348973513,  0.1368523985,  0.1388074309,  0.1407624632,  0.1427174956,
    0.1446725279,  0.1466275603,  0.1485825926,  0.1505376399,  0.1524926722,
    0.1544477046,  0.1564027369,  0.1583577693,  0.1603128016,  0.1622678339,
    0.1642228663,  0.1661778986,  0.1681329459,  0.1700879782,  0.1720430106,
    0.1739980429,  0.1759530753,  0.1779081076,  0.1798631400,  0.1818181872,
    0.1837732196,  0.1857282519,  0.1876832843,  0.1896383166,  0.1915933490,
    0.1935483813,  0.1955034137,  0.1974584460,  0.1994134933,  0.2013685256,
    0.2033235580,  0.2052785903,  0.2072336227,  0.2091886550,  0.2111436874,
    0.2130987346,  0.2150537670,  0.2170087993,  0.2189638317,  0.2209188640,
    0.2228738964,  0.2248289287,  0.2267839611,  0.2287389934,  0.2306940407,
    0.2326490730,  0.2346041054,  0.2365591377,  0.2385141701,  0.2404692024,
    0.2424242347,  0.2443792820,  0.2463343143,  0.2482893467,  0.2502443790,
    0.2521994114,  0.2541544437,  0.2561094761,  0.2580645084,  0.2600195408,
    0.2619745731,  0.2639296055,  0.2658846378,  0.2678396702,  0.2697947323,
    0.2717497647,  0.2737047970,  0.2756598294,  0.2776148617,  0.2795698941,
    0.2815249264,  0.2834799588,  0.2854349911,  0.2873900235,  0.2893450558,
    0.2913000882,  0.2932551205,  0.2952101529,  0.2971651852,  0.2991202474,
    0.3010752797,  0.3030303121,  0.3049853444,  0.3069403768,  0.3088954091,
    0.3108504415,  0.3128054738,  0.3147605062,  0.3167155385,  0.3186705709,
    0.3206256032,  0.3225806355,  0.3245356679,  0.3264907002,  0.3284457326,
    0.3304007649,  0.3323558271,  0.3343108594,  0.3362658918,  0.3382209241,
    0.3401759565,  0.3421309888,  0.3440860212,  0.3460410535,  0.3479960859,
    0.3499511182,  0.3519061506,  0.3538611829,  0.3558162153,  0.3577712476,
    0.3597262800,  0.3616813421,  0.3636363745,  0.3655914068,  0.3675464392,
    0.3695014715,  0.3714565039,  0.3734115362,  0.3753665686,  0.3773216009,
    0.3792766333,  0.3812316656,  0.3831866980,  0.3851417303,  0.3870967627,
    0.3890517950,  0.3910068274,  0.3929618597,  0.3949169219,  0.3968719542,
    0.3988269866,  0.4007820189,  0.4027370512,  0.4046920836,  0.4066471159,
    0.4086021483,  0.4105571806,  0.4125122130,  0.4144672453,  0.4164222777,
    0.4183773100,  0.4203323424,  0.4222873747,  0.4242424369,  0.4261974692,
    0.4281525016,  0.4301075339,  0.4320625663,  0.4340175986,  0.4359726310,
    0.4379276633,  0.4398826957,  0.4418377280,  0.4437927604,  0.4457477927,
    0.4477028251,  0.4496578574,  0.4516128898,  0.4535679221,  0.4555229545,
    0.4574780166,  0.4594330490,  0.4613880813,  0.4633431137,  0.4652981460,
    0.4672531784,  0.4692082107,  0.4711632431,  0.4731182754,  0.4750733078,
    0.4770283401,  0.4789833724,  0.4809384048,  0.4828934371,  0.4848484695,
    0.4868035316,  0.4887585640,  0.4907135963,  0.4926686287,  0.4946236610,
    0.4965786934,  0.4985337257,  0.5004887581,  0.5024437904,  0.5043988228,
    0.5063538551,  0.5083088875,  0.5102639198,  0.5122189522,  0.5141739845,
    0.5161290169,  0.5180840492,  0.5200390816,  0.5219941139,  0.5239491463,
    0.5259041786,  0.5278592110,  0.5298142433,  0.5317692757,  0.5337243080,
    0.5356794000,  0.5376344323,  0.5395894647,  0.5415444970,  0.5434995294,
    0.5454545617,  0.5474095941,  0.5493646264,  0.5513196588,  0.5532746911,
    0.5552297235,  0.5571847558,  0.5591397882,  0.5610948205,  0.5630498528,
    0.5650048852,  0.5669599175,  0.5689149499,  0.5708699822,  0.5728250146,
    0.5747800469,  0.5767350793,  0.5786901116,  0.5806451440,  0.5826001763,
    0.5845552087,  0.5865102410,  0.5884652734,  0.5904203057,  0.5923753381,
    0.5943303704,  0.5962854624,  0.5982404947,  0.6001955271,  0.6021505594,
    0.6041055918,  0.6060606241,  0.6080156565,  0.6099706888,  0.6119257212,
    0.6138807535,  0.6158357859,  0.6177908182,  0.6197458506,  0.6217008829,
    0.6236559153,  0.6256109476,  0.6275659800,  0.6295210123,  0.6314760447,
    0.6334310770,  0.6353861094,  0.6373411417,  0.6392961740,  0.6412512064,
    0.6432062387,  0.6451612711,  0.6471163034,  0.6490713358,  0.6510263681,
    0.6529814005,  0.6549364328,  0.6568914652,  0.6588464975,  0.6608015895,
    0.6627566218,  0.6647116542,  0.6666666865,  0.6686217189,  0.6705767512,
    0.6725317836,  0.6744868159,  0.6764418483,  0.6783968806,  0.6803519130,
    0.6823069453,  0.6842619777,  0.6862170100,  0.6881720424,  0.6901270747,
    0.6920821071,  0.6940371394,  0.6959921718,  0.6979472041,  0.6999022365,
    0.7018572688,  0.7038123012,  0.7057673335,  0.7077223659,  0.7096773982,
    0.7116324306,  0.7135874629,  0.7155424953,  0.7174975276,  0.7194525599,
    0.7214076519,  0.7233626842,  0.7253177166,  0.7272727489,  0.7292277813,
    0.7311828136,  0.7331378460,  0.7350928783,  0.7370479107,  0.7390029430,
    0.7409579754,  0.7429130077,  0.7448680401,  0.7468230724,  0.7487781048,
    0.7507331371,  0.7526881695,  0.7546432018,  0.7565982342,  0.7585532665,
    0.7605082989,  0.7624633312,  0.7644183636,  0.7663733959,  0.7683284283,
    0.7702834606,  0.7722384930,  0.7741935253,  0.7761485577,  0.7781035900,
    0.7800586224,  0.7820136547,  0.7839686871,  0.7859237790,  0.7878788114,
    0.7898338437,  0.7917888761,  0.7937439084,  0.7956989408,  0.7976539731,
    0.7996090055,  0.8015640378,  0.8035190701,  0.8054741025,  0.8074291348,
    0.8093841672,  0.8113391995,  0.8132942319,  0.8152492642,  0.8172042966,
    0.8191593289,  0.8211143613,  0.8230693936,  0.8250244260,  0.8269794583,
    0.8289344907,  0.8308895230,  0.8328445554,  0.8347995877,  0.8367546201,
    0.8387096524,  0.8406646848,  0.8426197171,  0.8445747495,  0.8465298414,
    0.8484848738,  0.8504399061,  0.8523949385,  0.8543499708,  0.8563050032,
    0.8582600355,  0.8602150679,  0.8621701002,  0.8641251326,  0.8660801649,
    0.8680351973,  0.8699902296,  0.8719452620,  0.8739002943,  0.8758553267,
    0.8778103590,  0.8797653913,  0.8817204237,  0.8836754560,  0.8856304884,
    0.8875855207,  0.8895405531,  0.8914955854,  0.8934506178,  0.8954056501,
    0.8973606825,  0.8993157148,  0.9012707472,  0.9032257795,  0.9051808119,
    0.9071358442,  0.9090908766,  0.9110459685,  0.9130010009,  0.9149560332,
    0.9169110656,  0.9188660979,  0.9208211303,  0.9227761626,  0.9247311950,
    0.9266862273,  0.9286412597,  0.9305962920,  0.9325513244,  0.9345063567,
    0.9364613891,  0.9384164214,  0.9403714538,  0.9423264861,  0.9442815185,
    0.9462365508,  0.9481915832,  0.9501466155,  0.9521016479,  0.9540566802,
    0.9560117126,  0.9579667449,  0.9599217772,  0.9618768096,  0.9638318419,
    0.9657868743,  0.9677419066,  0.9696969390,  0.9716520309,  0.9736070633,
    0.9755620956,  0.9775171280,  0.9794721603,  0.9814271927,  0.9833822250,
    0.9853372574,  0.9872922897,  0.9892473221,  0.9912023544,  0.9931573868,
    0.9951124191,  0.9970674515,  0.9990224838,  1.0009775162
};

#endif /* USE_LAYER_I_TABLES */


/**************************************************************************
  Title        : I_dequantize_sample

  Purpose      : Dequantizes subband coefficients.

  Usage        : I_dequantize_sample(mp)

  Input        : mp - MP1 stream parameters

  Explanation  : After dequantization the reconstructed value of the subband
                 coefficient is finally obtained by multiplying the fraction
                 value by its scale factor.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
I_dequantize_sample(MP_Stream *mp)
{
    static BYTE *de_table, *scale_factor, *bit_alloc;
    static int16 *quant;
    static int i, sign;
    static FLOAT *fraction, *rec;

    de_table = &deinterleave_Layer_I[mp->header->channels() - 1][0];
    scale_factor = mp->frame->scale_factors;
    quant = mp->frame->quant;
    bit_alloc = mp->frame->bit_alloc;
    fraction = mp->buffer->reconstructed;

    i = 0;
    while (i < SBLIMIT << (mp->header->channels() - 1)) {
        i++;

        rec = &fraction[*de_table++];

        switch (*bit_alloc) {
            case 0:
                *rec = 0;
                break;

#ifdef USE_LAYER_I_TABLES
            case 1:
                *rec = requant1[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 2:
                *rec = requant2[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 3:
                *rec = requant3[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 4:
                *rec = requant4[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 5:
                *rec = requant5[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 6:
                *rec = requant6[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 7:
                *rec = requant7[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 8:
                *rec = requant8[*quant];
                *rec *= scale_factors[*scale_factor];
                break;

            case 9:
                *rec = requant9[*quant];
                *rec *= scale_factors[*scale_factor];
                break;
#else
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
#endif /* USE_LAYER_I_TABLES */

            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                sign = (*quant & sign_mask[*bit_alloc]) ? 0 : 1;
                *rec = scaleI[sign][*bit_alloc];
                *rec += (*quant & sample_mask[*bit_alloc]) * scaleI[0][*bit_alloc];
                *rec *= scale_factors[*scale_factor];
                break;
        }

        bit_alloc++;
        quant++;
        scale_factor++;
    }
}


#ifdef GENERATE_TABLES

#include <math.h>
#include <stdlib.h>

/**************************************************************************
  Title        : main

  Purpose      : Creates Layer I dequantization tables for the specified
                 bit allocations.

  Usage        : main(argc, argv)

  Input        : argc    - number of command line arguments
                 argv[0] - name of executable
                 argv[1] - number of tables (1-14) to generate
                 argv[2] - name output file

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
main(int argc, char *argv)
{
    FILE *fp;
    int i, j;
    int bit_allocI[] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
    int bit_alloc_len = 7;
    float foo;

    if (argc != 3) {
        fprintf(stderr, "usage : %s <num_tables> <output_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    bit_alloc_len = atoi(argv[1]);

    fp = fopen(argv[2], "w");
    if (fp == NULL) {
        fprintf(stderr, "Unable to open file %s.\n", argv[2]);
        exit(EXIT_FAILURE);
    }

    for (i = 0; i < bit_alloc_len; i++) {
        fprintf(fp, "Bit_Alloc : %i\n", bit_allocI[i] - 1);

        for (j = 0; j < (1 << bit_allocI[i]); j++) {
            foo = (j & sign_mask[bit_allocI[i] - 1]) ? 0.0 : -1.0;
            foo += (j & sample_mask[bit_allocI[i] - 1]) * scaleI[0][bit_allocI[i] - 1];
            foo += scaleI[0][bit_allocI[i] - 1];

            if (j && ((j % 5) == 0))
                fprintf(fp, "\n");
            fprintf(fp, "%3.10f, ", foo);
        }
        fprintf(fp, "\n");
    }
    fclose(fp);
}

#endif /* GENERATE_TABLES */
