/**************************************************************************
  layer2.cpp - MPEG-1/MPEG-2 LSF Layer II decoding subroutines.

  Author(s): Juha Ojanpera
  Copyright (c) 1998-1999 Juha Ojanpera.
  *************************************************************************/

/**************************************************************************
  External Objects Needed
  *************************************************************************/

/*-- System Headers. --*/
#include <string.h>

/*-- Project Headers. --*/
#include "layer.h"
#include "mstream.h" // MP_Stream class

extern int16 sample_mask[];
extern uint32 sign_mask[];
extern FLOAT scale_factors[2 * SBLIMIT];


/**************************************************************************
  Internal Objects
  *************************************************************************/

/*
   Purpose:     Obtains the dequantized samples from precomputed tables.
   Explanation: - */
#define USE_LAYER_II_TABLES

/*
   Purpose:     Computes the dequantization tables.
   Explanation: No grouping tables included. */
//#define GENERATE_TABLES

/*
   Purpose:     Computes the dequantization tables for grouped samples.
   Explanation: - */
//#define NO_GROUPING_SAMPLES


/*
   Purpose:     This table contains 3 requantized samples for each
                legal codeword when grouped in 5 bits, i.e. 3 quantization
                steps per sample.
   Explanation: - */
static FLOAT group3_samples[] = {
    -0.6666666667, -0.6666666667, -0.6666666667, 0.0000000000,  -0.6666666667, -0.6666666667,
    0.6666666667,  -0.6666666667, -0.6666666667, -0.6666666667, 0.0000000000,  -0.6666666667,
    0.0000000000,  0.0000000000,  -0.6666666667, 0.6666666667,  0.0000000000,  -0.6666666667,
    -0.6666666667, 0.6666666667,  -0.6666666667, 0.0000000000,  0.6666666667,  -0.6666666667,
    0.6666666667,  0.6666666667,  -0.6666666667, -0.6666666667, -0.6666666667, 0.0000000000,
    0.0000000000,  -0.6666666667, 0.0000000000,  0.6666666667,  -0.6666666667, 0.0000000000,
    -0.6666666667, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,
    0.6666666667,  0.0000000000,  0.0000000000,  -0.6666666667, 0.6666666667,  0.0000000000,
    0.0000000000,  0.6666666667,  0.0000000000,  0.6666666667,  0.6666666667,  0.0000000000,
    -0.6666666667, -0.6666666667, 0.6666666667,  0.0000000000,  -0.6666666667, 0.6666666667,
    0.6666666667,  -0.6666666667, 0.6666666667,  -0.6666666667, 0.0000000000,  0.6666666667,
    0.0000000000,  0.0000000000,  0.6666666667,  0.6666666667,  0.0000000000,  0.6666666667,
    -0.6666666667, 0.6666666667,  0.6666666667,  0.0000000000,  0.6666666667,  0.6666666667,
    0.6666666667,  0.6666666667,  0.6666666667,  -0.6666666667, -0.6666666667, -0.6666666667,
    0.0000000000,  -0.6666666667, -0.6666666667, 0.6666666667,  -0.6666666667, -0.6666666667,
    -0.6666666667, 0.0000000000,  -0.6666666667, 0.0000000000,  0.0000000000,  -0.6666666667
};

/*
   Purpose:     This table contains 3 requantized samples for each
                legal codeword when grouped in 7 bits, i.e. 5 quantization
                steps per sample.
   Explanation: - */
static FLOAT group5_samples[] = {
    -0.8, -0.8, -0.8, -0.4, -0.8, -0.8, 0.0, -0.8, -0.8, 0.4, -0.8, -0.8, 0.8, -0.8, -0.8,
    -0.8, -0.4, -0.8, -0.4, -0.4, -0.8, 0.0, -0.4, -0.8, 0.4, -0.4, -0.8, 0.8, -0.4, -0.8,
    -0.8, 0.0,  -0.8, -0.4, 0.0,  -0.8, 0.0, 0.0,  -0.8, 0.4, 0.0,  -0.8, 0.8, 0.0,  -0.8,
    -0.8, 0.4,  -0.8, -0.4, 0.4,  -0.8, 0.0, 0.4,  -0.8, 0.4, 0.4,  -0.8, 0.8, 0.4,  -0.8,
    -0.8, 0.8,  -0.8, -0.4, 0.8,  -0.8, 0.0, 0.8,  -0.8, 0.4, 0.8,  -0.8, 0.8, 0.8,  -0.8,
    -0.8, -0.8, -0.4, -0.4, -0.8, -0.4, 0.0, -0.8, -0.4, 0.4, -0.8, -0.4, 0.8, -0.8, -0.4,
    -0.8, -0.4, -0.4, -0.4, -0.4, -0.4, 0.0, -0.4, -0.4, 0.4, -0.4, -0.4, 0.8, -0.4, -0.4,
    -0.8, 0.0,  -0.4, -0.4, 0.0,  -0.4, 0.0, 0.0,  -0.4, 0.4, 0.0,  -0.4, 0.8, 0.0,  -0.4,
    -0.8, 0.4,  -0.4, -0.4, 0.4,  -0.4, 0.0, 0.4,  -0.4, 0.4, 0.4,  -0.4, 0.8, 0.4,  -0.4,
    -0.8, 0.8,  -0.4, -0.4, 0.8,  -0.4, 0.0, 0.8,  -0.4, 0.4, 0.8,  -0.4, 0.8, 0.8,  -0.4,
    -0.8, -0.8, 0.0,  -0.4, -0.8, 0.0,  0.0, -0.8, 0.0,  0.4, -0.8, 0.0,  0.8, -0.8, 0.0,
    -0.8, -0.4, 0.0,  -0.4, -0.4, 0.0,  0.0, -0.4, 0.0,  0.4, -0.4, 0.0,  0.8, -0.4, 0.0,
    -0.8, 0.0,  0.0,  -0.4, 0.0,  0.0,  0.0, 0.0,  0.0,  0.4, 0.0,  0.0,  0.8, 0.0,  0.0,
    -0.8, 0.4,  0.0,  -0.4, 0.4,  0.0,  0.0, 0.4,  0.0,  0.4, 0.4,  0.0,  0.8, 0.4,  0.0,
    -0.8, 0.8,  0.0,  -0.4, 0.8,  0.0,  0.0, 0.8,  0.0,  0.4, 0.8,  0.0,  0.8, 0.8,  0.0,
    -0.8, -0.8, 0.4,  -0.4, -0.8, 0.4,  0.0, -0.8, 0.4,  0.4, -0.8, 0.4,  0.8, -0.8, 0.4,
    -0.8, -0.4, 0.4,  -0.4, -0.4, 0.4,  0.0, -0.4, 0.4,  0.4, -0.4, 0.4,  0.8, -0.4, 0.4,
    -0.8, 0.0,  0.4,  -0.4, 0.0,  0.4,  0.0, 0.0,  0.4,  0.4, 0.0,  0.4,  0.8, 0.0,  0.4,
    -0.8, 0.4,  0.4,  -0.4, 0.4,  0.4,  0.0, 0.4,  0.4,  0.4, 0.4,  0.4,  0.8, 0.4,  0.4,
    -0.8, 0.8,  0.4,  -0.4, 0.8,  0.4,  0.0, 0.8,  0.4,  0.4, 0.8,  0.4,  0.8, 0.8,  0.4,
    -0.8, -0.8, 0.8,  -0.4, -0.8, 0.8,  0.0, -0.8, 0.8,  0.4, -0.8, 0.8,  0.8, -0.8, 0.8,
    -0.8, -0.4, 0.8,  -0.4, -0.4, 0.8,  0.0, -0.4, 0.8,  0.4, -0.4, 0.8,  0.8, -0.4, 0.8,
    -0.8, 0.0,  0.8,  -0.4, 0.0,  0.8,  0.0, 0.0,  0.8,  0.4, 0.0,  0.8,  0.8, 0.0,  0.8,
    -0.8, 0.4,  0.8,  -0.4, 0.4,  0.8,  0.0, 0.4,  0.8,  0.4, 0.4,  0.8,  0.8, 0.4,  0.8,
    -0.8, 0.8,  0.8,  -0.4, 0.8,  0.8,  0.0, 0.8,  0.8,  0.4, 0.8,  0.8,  0.8, 0.8,  0.8,
    -0.8, -0.8, -0.8, -0.4, -0.8, -0.8, 0.0, -0.8, -0.8
};

/*
   Purpose:     This table contains 3 requantized samples for each
                legal codeword when grouped in 10 bits, i.e. 9 quantization
                steps per sample.
   Explanation: - */
static FLOAT group9_samples[] = {
    -0.8888888889, -0.8888888889, -0.8888888889, -0.6666666667, -0.8888888889, -0.8888888889,
    -0.4444444444, -0.8888888889, -0.8888888889, -0.2222222222, -0.8888888889, -0.8888888889,
    0.0000000000,  -0.8888888889, -0.8888888889, 0.2222222222,  -0.8888888889, -0.8888888889,
    0.4444444444,  -0.8888888889, -0.8888888889, 0.6666666667,  -0.8888888889, -0.8888888889,
    0.8888888889,  -0.8888888889, -0.8888888889, -0.8888888889, -0.6666666667, -0.8888888889,
    -0.6666666667, -0.6666666667, -0.8888888889, -0.4444444444, -0.6666666667, -0.8888888889,
    -0.2222222222, -0.6666666667, -0.8888888889, 0.0000000000,  -0.6666666667, -0.8888888889,
    0.2222222222,  -0.6666666667, -0.8888888889, 0.4444444444,  -0.6666666667, -0.8888888889,
    0.6666666667,  -0.6666666667, -0.8888888889, 0.8888888889,  -0.6666666667, -0.8888888889,
    -0.8888888889, -0.4444444444, -0.8888888889, -0.6666666667, -0.4444444444, -0.8888888889,
    -0.4444444444, -0.4444444444, -0.8888888889, -0.2222222222, -0.4444444444, -0.8888888889,
    0.0000000000,  -0.4444444444, -0.8888888889, 0.2222222222,  -0.4444444444, -0.8888888889,
    0.4444444444,  -0.4444444444, -0.8888888889, 0.6666666667,  -0.4444444444, -0.8888888889,
    0.8888888889,  -0.4444444444, -0.8888888889, -0.8888888889, -0.2222222222, -0.8888888889,
    -0.6666666667, -0.2222222222, -0.8888888889, -0.4444444444, -0.2222222222, -0.8888888889,
    -0.2222222222, -0.2222222222, -0.8888888889, 0.0000000000,  -0.2222222222, -0.8888888889,
    0.2222222222,  -0.2222222222, -0.8888888889, 0.4444444444,  -0.2222222222, -0.8888888889,
    0.6666666667,  -0.2222222222, -0.8888888889, 0.8888888889,  -0.2222222222, -0.8888888889,
    -0.8888888889, 0.0000000000,  -0.8888888889, -0.6666666667, 0.0000000000,  -0.8888888889,
    -0.4444444444, 0.0000000000,  -0.8888888889, -0.2222222222, 0.0000000000,  -0.8888888889,
    0.0000000000,  0.0000000000,  -0.8888888889, 0.2222222222,  0.0000000000,  -0.8888888889,
    0.4444444444,  0.0000000000,  -0.8888888889, 0.6666666667,  0.0000000000,  -0.8888888889,
    0.8888888889,  0.0000000000,  -0.8888888889, -0.8888888889, 0.2222222222,  -0.8888888889,
    -0.6666666667, 0.2222222222,  -0.8888888889, -0.4444444444, 0.2222222222,  -0.8888888889,
    -0.2222222222, 0.2222222222,  -0.8888888889, 0.0000000000,  0.2222222222,  -0.8888888889,
    0.2222222222,  0.2222222222,  -0.8888888889, 0.4444444444,  0.2222222222,  -0.8888888889,
    0.6666666667,  0.2222222222,  -0.8888888889, 0.8888888889,  0.2222222222,  -0.8888888889,
    -0.8888888889, 0.4444444444,  -0.8888888889, -0.6666666667, 0.4444444444,  -0.8888888889,
    -0.4444444444, 0.4444444444,  -0.8888888889, -0.2222222222, 0.4444444444,  -0.8888888889,
    0.0000000000,  0.4444444444,  -0.8888888889, 0.2222222222,  0.4444444444,  -0.8888888889,
    0.4444444444,  0.4444444444,  -0.8888888889, 0.6666666667,  0.4444444444,  -0.8888888889,
    0.8888888889,  0.4444444444,  -0.8888888889, -0.8888888889, 0.6666666667,  -0.8888888889,
    -0.6666666667, 0.6666666667,  -0.8888888889, -0.4444444444, 0.6666666667,  -0.8888888889,
    -0.2222222222, 0.6666666667,  -0.8888888889, 0.0000000000,  0.6666666667,  -0.8888888889,
    0.2222222222,  0.6666666667,  -0.8888888889, 0.4444444444,  0.6666666667,  -0.8888888889,
    0.6666666667,  0.6666666667,  -0.8888888889, 0.8888888889,  0.6666666667,  -0.8888888889,
    -0.8888888889, 0.8888888889,  -0.8888888889, -0.6666666667, 0.8888888889,  -0.8888888889,
    -0.4444444444, 0.8888888889,  -0.8888888889, -0.2222222222, 0.8888888889,  -0.8888888889,
    0.0000000000,  0.8888888889,  -0.8888888889, 0.2222222222,  0.8888888889,  -0.8888888889,
    0.4444444444,  0.8888888889,  -0.8888888889, 0.6666666667,  0.8888888889,  -0.8888888889,
    0.8888888889,  0.8888888889,  -0.8888888889, -0.8888888889, -0.8888888889, -0.6666666667,
    -0.6666666667, -0.8888888889, -0.6666666667, -0.4444444444, -0.8888888889, -0.6666666667,
    -0.2222222222, -0.8888888889, -0.6666666667, 0.0000000000,  -0.8888888889, -0.6666666667,
    0.2222222222,  -0.8888888889, -0.6666666667, 0.4444444444,  -0.8888888889, -0.6666666667,
    0.6666666667,  -0.8888888889, -0.6666666667, 0.8888888889,  -0.8888888889, -0.6666666667,
    -0.8888888889, -0.6666666667, -0.6666666667, -0.6666666667, -0.6666666667, -0.6666666667,
    -0.4444444444, -0.6666666667, -0.6666666667, -0.2222222222, -0.6666666667, -0.6666666667,
    0.0000000000,  -0.6666666667, -0.6666666667, 0.2222222222,  -0.6666666667, -0.6666666667,
    0.4444444444,  -0.6666666667, -0.6666666667, 0.6666666667,  -0.6666666667, -0.6666666667,
    0.8888888889,  -0.6666666667, -0.6666666667, -0.8888888889, -0.4444444444, -0.6666666667,
    -0.6666666667, -0.4444444444, -0.6666666667, -0.4444444444, -0.4444444444, -0.6666666667,
    -0.2222222222, -0.4444444444, -0.6666666667, 0.0000000000,  -0.4444444444, -0.6666666667,
    0.2222222222,  -0.4444444444, -0.6666666667, 0.4444444444,  -0.4444444444, -0.6666666667,
    0.6666666667,  -0.4444444444, -0.6666666667, 0.8888888889,  -0.4444444444, -0.6666666667,
    -0.8888888889, -0.2222222222, -0.6666666667, -0.6666666667, -0.2222222222, -0.6666666667,
    -0.4444444444, -0.2222222222, -0.6666666667, -0.2222222222, -0.2222222222, -0.6666666667,
    0.0000000000,  -0.2222222222, -0.6666666667, 0.2222222222,  -0.2222222222, -0.6666666667,
    0.4444444444,  -0.2222222222, -0.6666666667, 0.6666666667,  -0.2222222222, -0.6666666667,
    0.8888888889,  -0.2222222222, -0.6666666667, -0.8888888889, 0.0000000000,  -0.6666666667,
    -0.6666666667, 0.0000000000,  -0.6666666667, -0.4444444444, 0.0000000000,  -0.6666666667,
    -0.2222222222, 0.0000000000,  -0.6666666667, 0.0000000000,  0.0000000000,  -0.6666666667,
    0.2222222222,  0.0000000000,  -0.6666666667, 0.4444444444,  0.0000000000,  -0.6666666667,
    0.6666666667,  0.0000000000,  -0.6666666667, 0.8888888889,  0.0000000000,  -0.6666666667,
    -0.8888888889, 0.2222222222,  -0.6666666667, -0.6666666667, 0.2222222222,  -0.6666666667,
    -0.4444444444, 0.2222222222,  -0.6666666667, -0.2222222222, 0.2222222222,  -0.6666666667,
    0.0000000000,  0.2222222222,  -0.6666666667, 0.2222222222,  0.2222222222,  -0.6666666667,
    0.4444444444,  0.2222222222,  -0.6666666667, 0.6666666667,  0.2222222222,  -0.6666666667,
    0.8888888889,  0.2222222222,  -0.6666666667, -0.8888888889, 0.4444444444,  -0.6666666667,
    -0.6666666667, 0.4444444444,  -0.6666666667, -0.4444444444, 0.4444444444,  -0.6666666667,
    -0.2222222222, 0.4444444444,  -0.6666666667, 0.0000000000,  0.4444444444,  -0.6666666667,
    0.2222222222,  0.4444444444,  -0.6666666667, 0.4444444444,  0.4444444444,  -0.6666666667,
    0.6666666667,  0.4444444444,  -0.6666666667, 0.8888888889,  0.4444444444,  -0.6666666667,
    -0.8888888889, 0.6666666667,  -0.6666666667, -0.6666666667, 0.6666666667,  -0.6666666667,
    -0.4444444444, 0.6666666667,  -0.6666666667, -0.2222222222, 0.6666666667,  -0.6666666667,
    0.0000000000,  0.6666666667,  -0.6666666667, 0.2222222222,  0.6666666667,  -0.6666666667,
    0.4444444444,  0.6666666667,  -0.6666666667, 0.6666666667,  0.6666666667,  -0.6666666667,
    0.8888888889,  0.6666666667,  -0.6666666667, -0.8888888889, 0.8888888889,  -0.6666666667,
    -0.6666666667, 0.8888888889,  -0.6666666667, -0.4444444444, 0.8888888889,  -0.6666666667,
    -0.2222222222, 0.8888888889,  -0.6666666667, 0.0000000000,  0.8888888889,  -0.6666666667,
    0.2222222222,  0.8888888889,  -0.6666666667, 0.4444444444,  0.8888888889,  -0.6666666667,
    0.6666666667,  0.8888888889,  -0.6666666667, 0.8888888889,  0.8888888889,  -0.6666666667,
    -0.8888888889, -0.8888888889, -0.4444444444, -0.6666666667, -0.8888888889, -0.4444444444,
    -0.4444444444, -0.8888888889, -0.4444444444, -0.2222222222, -0.8888888889, -0.4444444444,
    0.0000000000,  -0.8888888889, -0.4444444444, 0.2222222222,  -0.8888888889, -0.4444444444,
    0.4444444444,  -0.8888888889, -0.4444444444, 0.6666666667,  -0.8888888889, -0.4444444444,
    0.8888888889,  -0.8888888889, -0.4444444444, -0.8888888889, -0.6666666667, -0.4444444444,
    -0.6666666667, -0.6666666667, -0.4444444444, -0.4444444444, -0.6666666667, -0.4444444444,
    -0.2222222222, -0.6666666667, -0.4444444444, 0.0000000000,  -0.6666666667, -0.4444444444,
    0.2222222222,  -0.6666666667, -0.4444444444, 0.4444444444,  -0.6666666667, -0.4444444444,
    0.6666666667,  -0.6666666667, -0.4444444444, 0.8888888889,  -0.6666666667, -0.4444444444,
    -0.8888888889, -0.4444444444, -0.4444444444, -0.6666666667, -0.4444444444, -0.4444444444,
    -0.4444444444, -0.4444444444, -0.4444444444, -0.2222222222, -0.4444444444, -0.4444444444,
    0.0000000000,  -0.4444444444, -0.4444444444, 0.2222222222,  -0.4444444444, -0.4444444444,
    0.4444444444,  -0.4444444444, -0.4444444444, 0.6666666667,  -0.4444444444, -0.4444444444,
    0.8888888889,  -0.4444444444, -0.4444444444, -0.8888888889, -0.2222222222, -0.4444444444,
    -0.6666666667, -0.2222222222, -0.4444444444, -0.4444444444, -0.2222222222, -0.4444444444,
    -0.2222222222, -0.2222222222, -0.4444444444, 0.0000000000,  -0.2222222222, -0.4444444444,
    0.2222222222,  -0.2222222222, -0.4444444444, 0.4444444444,  -0.2222222222, -0.4444444444,
    0.6666666667,  -0.2222222222, -0.4444444444, 0.8888888889,  -0.2222222222, -0.4444444444,
    -0.8888888889, 0.0000000000,  -0.4444444444, -0.6666666667, 0.0000000000,  -0.4444444444,
    -0.4444444444, 0.0000000000,  -0.4444444444, -0.2222222222, 0.0000000000,  -0.4444444444,
    0.0000000000,  0.0000000000,  -0.4444444444, 0.2222222222,  0.0000000000,  -0.4444444444,
    0.4444444444,  0.0000000000,  -0.4444444444, 0.6666666667,  0.0000000000,  -0.4444444444,
    0.8888888889,  0.0000000000,  -0.4444444444, -0.8888888889, 0.2222222222,  -0.4444444444,
    -0.6666666667, 0.2222222222,  -0.4444444444, -0.4444444444, 0.2222222222,  -0.4444444444,
    -0.2222222222, 0.2222222222,  -0.4444444444, 0.0000000000,  0.2222222222,  -0.4444444444,
    0.2222222222,  0.2222222222,  -0.4444444444, 0.4444444444,  0.2222222222,  -0.4444444444,
    0.6666666667,  0.2222222222,  -0.4444444444, 0.8888888889,  0.2222222222,  -0.4444444444,
    -0.8888888889, 0.4444444444,  -0.4444444444, -0.6666666667, 0.4444444444,  -0.4444444444,
    -0.4444444444, 0.4444444444,  -0.4444444444, -0.2222222222, 0.4444444444,  -0.4444444444,
    0.0000000000,  0.4444444444,  -0.4444444444, 0.2222222222,  0.4444444444,  -0.4444444444,
    0.4444444444,  0.4444444444,  -0.4444444444, 0.6666666667,  0.4444444444,  -0.4444444444,
    0.8888888889,  0.4444444444,  -0.4444444444, -0.8888888889, 0.6666666667,  -0.4444444444,
    -0.6666666667, 0.6666666667,  -0.4444444444, -0.4444444444, 0.6666666667,  -0.4444444444,
    -0.2222222222, 0.6666666667,  -0.4444444444, 0.0000000000,  0.6666666667,  -0.4444444444,
    0.2222222222,  0.6666666667,  -0.4444444444, 0.4444444444,  0.6666666667,  -0.4444444444,
    0.6666666667,  0.6666666667,  -0.4444444444, 0.8888888889,  0.6666666667,  -0.4444444444,
    -0.8888888889, 0.8888888889,  -0.4444444444, -0.6666666667, 0.8888888889,  -0.4444444444,
    -0.4444444444, 0.8888888889,  -0.4444444444, -0.2222222222, 0.8888888889,  -0.4444444444,
    0.0000000000,  0.8888888889,  -0.4444444444, 0.2222222222,  0.8888888889,  -0.4444444444,
    0.4444444444,  0.8888888889,  -0.4444444444, 0.6666666667,  0.8888888889,  -0.4444444444,
    0.8888888889,  0.8888888889,  -0.4444444444, -0.8888888889, -0.8888888889, -0.2222222222,
    -0.6666666667, -0.8888888889, -0.2222222222, -0.4444444444, -0.8888888889, -0.2222222222,
    -0.2222222222, -0.8888888889, -0.2222222222, 0.0000000000,  -0.8888888889, -0.2222222222,
    0.2222222222,  -0.8888888889, -0.2222222222, 0.4444444444,  -0.8888888889, -0.2222222222,
    0.6666666667,  -0.8888888889, -0.2222222222, 0.8888888889,  -0.8888888889, -0.2222222222,
    -0.8888888889, -0.6666666667, -0.2222222222, -0.6666666667, -0.6666666667, -0.2222222222,
    -0.4444444444, -0.6666666667, -0.2222222222, -0.2222222222, -0.6666666667, -0.2222222222,
    0.0000000000,  -0.6666666667, -0.2222222222, 0.2222222222,  -0.6666666667, -0.2222222222,
    0.4444444444,  -0.6666666667, -0.2222222222, 0.6666666667,  -0.6666666667, -0.2222222222,
    0.8888888889,  -0.6666666667, -0.2222222222, -0.8888888889, -0.4444444444, -0.2222222222,
    -0.6666666667, -0.4444444444, -0.2222222222, -0.4444444444, -0.4444444444, -0.2222222222,
    -0.2222222222, -0.4444444444, -0.2222222222, 0.0000000000,  -0.4444444444, -0.2222222222,
    0.2222222222,  -0.4444444444, -0.2222222222, 0.4444444444,  -0.4444444444, -0.2222222222,
    0.6666666667,  -0.4444444444, -0.2222222222, 0.8888888889,  -0.4444444444, -0.2222222222,
    -0.8888888889, -0.2222222222, -0.2222222222, -0.6666666667, -0.2222222222, -0.2222222222,
    -0.4444444444, -0.2222222222, -0.2222222222, -0.2222222222, -0.2222222222, -0.2222222222,
    0.0000000000,  -0.2222222222, -0.2222222222, 0.2222222222,  -0.2222222222, -0.2222222222,
    0.4444444444,  -0.2222222222, -0.2222222222, 0.6666666667,  -0.2222222222, -0.2222222222,
    0.8888888889,  -0.2222222222, -0.2222222222, -0.8888888889, 0.0000000000,  -0.2222222222,
    -0.6666666667, 0.0000000000,  -0.2222222222, -0.4444444444, 0.0000000000,  -0.2222222222,
    -0.2222222222, 0.0000000000,  -0.2222222222, 0.0000000000,  0.0000000000,  -0.2222222222,
    0.2222222222,  0.0000000000,  -0.2222222222, 0.4444444444,  0.0000000000,  -0.2222222222,
    0.6666666667,  0.0000000000,  -0.2222222222, 0.8888888889,  0.0000000000,  -0.2222222222,
    -0.8888888889, 0.2222222222,  -0.2222222222, -0.6666666667, 0.2222222222,  -0.2222222222,
    -0.4444444444, 0.2222222222,  -0.2222222222, -0.2222222222, 0.2222222222,  -0.2222222222,
    0.0000000000,  0.2222222222,  -0.2222222222, 0.2222222222,  0.2222222222,  -0.2222222222,
    0.4444444444,  0.2222222222,  -0.2222222222, 0.6666666667,  0.2222222222,  -0.2222222222,
    0.8888888889,  0.2222222222,  -0.2222222222, -0.8888888889, 0.4444444444,  -0.2222222222,
    -0.6666666667, 0.4444444444,  -0.2222222222, -0.4444444444, 0.4444444444,  -0.2222222222,
    -0.2222222222, 0.4444444444,  -0.2222222222, 0.0000000000,  0.4444444444,  -0.2222222222,
    0.2222222222,  0.4444444444,  -0.2222222222, 0.4444444444,  0.4444444444,  -0.2222222222,
    0.6666666667,  0.4444444444,  -0.2222222222, 0.8888888889,  0.4444444444,  -0.2222222222,
    -0.8888888889, 0.6666666667,  -0.2222222222, -0.6666666667, 0.6666666667,  -0.2222222222,
    -0.4444444444, 0.6666666667,  -0.2222222222, -0.2222222222, 0.6666666667,  -0.2222222222,
    0.0000000000,  0.6666666667,  -0.2222222222, 0.2222222222,  0.6666666667,  -0.2222222222,
    0.4444444444,  0.6666666667,  -0.2222222222, 0.6666666667,  0.6666666667,  -0.2222222222,
    0.8888888889,  0.6666666667,  -0.2222222222, -0.8888888889, 0.8888888889,  -0.2222222222,
    -0.6666666667, 0.8888888889,  -0.2222222222, -0.4444444444, 0.8888888889,  -0.2222222222,
    -0.2222222222, 0.8888888889,  -0.2222222222, 0.0000000000,  0.8888888889,  -0.2222222222,
    0.2222222222,  0.8888888889,  -0.2222222222, 0.4444444444,  0.8888888889,  -0.2222222222,
    0.6666666667,  0.8888888889,  -0.2222222222, 0.8888888889,  0.8888888889,  -0.2222222222,
    -0.8888888889, -0.8888888889, 0.0000000000,  -0.6666666667, -0.8888888889, 0.0000000000,
    -0.4444444444, -0.8888888889, 0.0000000000,  -0.2222222222, -0.8888888889, 0.0000000000,
    0.0000000000,  -0.8888888889, 0.0000000000,  0.2222222222,  -0.8888888889, 0.0000000000,
    0.4444444444,  -0.8888888889, 0.0000000000,  0.6666666667,  -0.8888888889, 0.0000000000,
    0.8888888889,  -0.8888888889, 0.0000000000,  -0.8888888889, -0.6666666667, 0.0000000000,
    -0.6666666667, -0.6666666667, 0.0000000000,  -0.4444444444, -0.6666666667, 0.0000000000,
    -0.2222222222, -0.6666666667, 0.0000000000,  0.0000000000,  -0.6666666667, 0.0000000000,
    0.2222222222,  -0.6666666667, 0.0000000000,  0.4444444444,  -0.6666666667, 0.0000000000,
    0.6666666667,  -0.6666666667, 0.0000000000,  0.8888888889,  -0.6666666667, 0.0000000000,
    -0.8888888889, -0.4444444444, 0.0000000000,  -0.6666666667, -0.4444444444, 0.0000000000,
    -0.4444444444, -0.4444444444, 0.0000000000,  -0.2222222222, -0.4444444444, 0.0000000000,
    0.0000000000,  -0.4444444444, 0.0000000000,  0.2222222222,  -0.4444444444, 0.0000000000,
    0.4444444444,  -0.4444444444, 0.0000000000,  0.6666666667,  -0.4444444444, 0.0000000000,
    0.8888888889,  -0.4444444444, 0.0000000000,  -0.8888888889, -0.2222222222, 0.0000000000,
    -0.6666666667, -0.2222222222, 0.0000000000,  -0.4444444444, -0.2222222222, 0.0000000000,
    -0.2222222222, -0.2222222222, 0.0000000000,  0.0000000000,  -0.2222222222, 0.0000000000,
    0.2222222222,  -0.2222222222, 0.0000000000,  0.4444444444,  -0.2222222222, 0.0000000000,
    0.6666666667,  -0.2222222222, 0.0000000000,  0.8888888889,  -0.2222222222, 0.0000000000,
    -0.8888888889, 0.0000000000,  0.0000000000,  -0.6666666667, 0.0000000000,  0.0000000000,
    -0.4444444444, 0.0000000000,  0.0000000000,  -0.2222222222, 0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.2222222222,  0.0000000000,  0.0000000000,
    0.4444444444,  0.0000000000,  0.0000000000,  0.6666666667,  0.0000000000,  0.0000000000,
    0.8888888889,  0.0000000000,  0.0000000000,  -0.8888888889, 0.2222222222,  0.0000000000,
    -0.6666666667, 0.2222222222,  0.0000000000,  -0.4444444444, 0.2222222222,  0.0000000000,
    -0.2222222222, 0.2222222222,  0.0000000000,  0.0000000000,  0.2222222222,  0.0000000000,
    0.2222222222,  0.2222222222,  0.0000000000,  0.4444444444,  0.2222222222,  0.0000000000,
    0.6666666667,  0.2222222222,  0.0000000000,  0.8888888889,  0.2222222222,  0.0000000000,
    -0.8888888889, 0.4444444444,  0.0000000000,  -0.6666666667, 0.4444444444,  0.0000000000,
    -0.4444444444, 0.4444444444,  0.0000000000,  -0.2222222222, 0.4444444444,  0.0000000000,
    0.0000000000,  0.4444444444,  0.0000000000,  0.2222222222,  0.4444444444,  0.0000000000,
    0.4444444444,  0.4444444444,  0.0000000000,  0.6666666667,  0.4444444444,  0.0000000000,
    0.8888888889,  0.4444444444,  0.0000000000,  -0.8888888889, 0.6666666667,  0.0000000000,
    -0.6666666667, 0.6666666667,  0.0000000000,  -0.4444444444, 0.6666666667,  0.0000000000,
    -0.2222222222, 0.6666666667,  0.0000000000,  0.0000000000,  0.6666666667,  0.0000000000,
    0.2222222222,  0.6666666667,  0.0000000000,  0.4444444444,  0.6666666667,  0.0000000000,
    0.6666666667,  0.6666666667,  0.0000000000,  0.8888888889,  0.6666666667,  0.0000000000,
    -0.8888888889, 0.8888888889,  0.0000000000,  -0.6666666667, 0.8888888889,  0.0000000000,
    -0.4444444444, 0.8888888889,  0.0000000000,  -0.2222222222, 0.8888888889,  0.0000000000,
    0.0000000000,  0.8888888889,  0.0000000000,  0.2222222222,  0.8888888889,  0.0000000000,
    0.4444444444,  0.8888888889,  0.0000000000,  0.6666666667,  0.8888888889,  0.0000000000,
    0.8888888889,  0.8888888889,  0.0000000000,  -0.8888888889, -0.8888888889, 0.2222222222,
    -0.6666666667, -0.8888888889, 0.2222222222,  -0.4444444444, -0.8888888889, 0.2222222222,
    -0.2222222222, -0.8888888889, 0.2222222222,  0.0000000000,  -0.8888888889, 0.2222222222,
    0.2222222222,  -0.8888888889, 0.2222222222,  0.4444444444,  -0.8888888889, 0.2222222222,
    0.6666666667,  -0.8888888889, 0.2222222222,  0.8888888889,  -0.8888888889, 0.2222222222,
    -0.8888888889, -0.6666666667, 0.2222222222,  -0.6666666667, -0.6666666667, 0.2222222222,
    -0.4444444444, -0.6666666667, 0.2222222222,  -0.2222222222, -0.6666666667, 0.2222222222,
    0.0000000000,  -0.6666666667, 0.2222222222,  0.2222222222,  -0.6666666667, 0.2222222222,
    0.4444444444,  -0.6666666667, 0.2222222222,  0.6666666667,  -0.6666666667, 0.2222222222,
    0.8888888889,  -0.6666666667, 0.2222222222,  -0.8888888889, -0.4444444444, 0.2222222222,
    -0.6666666667, -0.4444444444, 0.2222222222,  -0.4444444444, -0.4444444444, 0.2222222222,
    -0.2222222222, -0.4444444444, 0.2222222222,  0.0000000000,  -0.4444444444, 0.2222222222,
    0.2222222222,  -0.4444444444, 0.2222222222,  0.4444444444,  -0.4444444444, 0.2222222222,
    0.6666666667,  -0.4444444444, 0.2222222222,  0.8888888889,  -0.4444444444, 0.2222222222,
    -0.8888888889, -0.2222222222, 0.2222222222,  -0.6666666667, -0.2222222222, 0.2222222222,
    -0.4444444444, -0.2222222222, 0.2222222222,  -0.2222222222, -0.2222222222, 0.2222222222,
    0.0000000000,  -0.2222222222, 0.2222222222,  0.2222222222,  -0.2222222222, 0.2222222222,
    0.4444444444,  -0.2222222222, 0.2222222222,  0.6666666667,  -0.2222222222, 0.2222222222,
    0.8888888889,  -0.2222222222, 0.2222222222,  -0.8888888889, 0.0000000000,  0.2222222222,
    -0.6666666667, 0.0000000000,  0.2222222222,  -0.4444444444, 0.0000000000,  0.2222222222,
    -0.2222222222, 0.0000000000,  0.2222222222,  0.0000000000,  0.0000000000,  0.2222222222,
    0.2222222222,  0.0000000000,  0.2222222222,  0.4444444444,  0.0000000000,  0.2222222222,
    0.6666666667,  0.0000000000,  0.2222222222,  0.8888888889,  0.0000000000,  0.2222222222,
    -0.8888888889, 0.2222222222,  0.2222222222,  -0.6666666667, 0.2222222222,  0.2222222222,
    -0.4444444444, 0.2222222222,  0.2222222222,  -0.2222222222, 0.2222222222,  0.2222222222,
    0.0000000000,  0.2222222222,  0.2222222222,  0.2222222222,  0.2222222222,  0.2222222222,
    0.4444444444,  0.2222222222,  0.2222222222,  0.6666666667,  0.2222222222,  0.2222222222,
    0.8888888889,  0.2222222222,  0.2222222222,  -0.8888888889, 0.4444444444,  0.2222222222,
    -0.6666666667, 0.4444444444,  0.2222222222,  -0.4444444444, 0.4444444444,  0.2222222222,
    -0.2222222222, 0.4444444444,  0.2222222222,  0.0000000000,  0.4444444444,  0.2222222222,
    0.2222222222,  0.4444444444,  0.2222222222,  0.4444444444,  0.4444444444,  0.2222222222,
    0.6666666667,  0.4444444444,  0.2222222222,  0.8888888889,  0.4444444444,  0.2222222222,
    -0.8888888889, 0.6666666667,  0.2222222222,  -0.6666666667, 0.6666666667,  0.2222222222,
    -0.4444444444, 0.6666666667,  0.2222222222,  -0.2222222222, 0.6666666667,  0.2222222222,
    0.0000000000,  0.6666666667,  0.2222222222,  0.2222222222,  0.6666666667,  0.2222222222,
    0.4444444444,  0.6666666667,  0.2222222222,  0.6666666667,  0.6666666667,  0.2222222222,
    0.8888888889,  0.6666666667,  0.2222222222,  -0.8888888889, 0.8888888889,  0.2222222222,
    -0.6666666667, 0.8888888889,  0.2222222222,  -0.4444444444, 0.8888888889,  0.2222222222,
    -0.2222222222, 0.8888888889,  0.2222222222,  0.0000000000,  0.8888888889,  0.2222222222,
    0.2222222222,  0.8888888889,  0.2222222222,  0.4444444444,  0.8888888889,  0.2222222222,
    0.6666666667,  0.8888888889,  0.2222222222,  0.8888888889,  0.8888888889,  0.2222222222,
    -0.8888888889, -0.8888888889, 0.4444444444,  -0.6666666667, -0.8888888889, 0.4444444444,
    -0.4444444444, -0.8888888889, 0.4444444444,  -0.2222222222, -0.8888888889, 0.4444444444,
    0.0000000000,  -0.8888888889, 0.4444444444,  0.2222222222,  -0.8888888889, 0.4444444444,
    0.4444444444,  -0.8888888889, 0.4444444444,  0.6666666667,  -0.8888888889, 0.4444444444,
    0.8888888889,  -0.8888888889, 0.4444444444,  -0.8888888889, -0.6666666667, 0.4444444444,
    -0.6666666667, -0.6666666667, 0.4444444444,  -0.4444444444, -0.6666666667, 0.4444444444,
    -0.2222222222, -0.6666666667, 0.4444444444,  0.0000000000,  -0.6666666667, 0.4444444444,
    0.2222222222,  -0.6666666667, 0.4444444444,  0.4444444444,  -0.6666666667, 0.4444444444,
    0.6666666667,  -0.6666666667, 0.4444444444,  0.8888888889,  -0.6666666667, 0.4444444444,
    -0.8888888889, -0.4444444444, 0.4444444444,  -0.6666666667, -0.4444444444, 0.4444444444,
    -0.4444444444, -0.4444444444, 0.4444444444,  -0.2222222222, -0.4444444444, 0.4444444444,
    0.0000000000,  -0.4444444444, 0.4444444444,  0.2222222222,  -0.4444444444, 0.4444444444,
    0.4444444444,  -0.4444444444, 0.4444444444,  0.6666666667,  -0.4444444444, 0.4444444444,
    0.8888888889,  -0.4444444444, 0.4444444444,  -0.8888888889, -0.2222222222, 0.4444444444,
    -0.6666666667, -0.2222222222, 0.4444444444,  -0.4444444444, -0.2222222222, 0.4444444444,
    -0.2222222222, -0.2222222222, 0.4444444444,  0.0000000000,  -0.2222222222, 0.4444444444,
    0.2222222222,  -0.2222222222, 0.4444444444,  0.4444444444,  -0.2222222222, 0.4444444444,
    0.6666666667,  -0.2222222222, 0.4444444444,  0.8888888889,  -0.2222222222, 0.4444444444,
    -0.8888888889, 0.0000000000,  0.4444444444,  -0.6666666667, 0.0000000000,  0.4444444444,
    -0.4444444444, 0.0000000000,  0.4444444444,  -0.2222222222, 0.0000000000,  0.4444444444,
    0.0000000000,  0.0000000000,  0.4444444444,  0.2222222222,  0.0000000000,  0.4444444444,
    0.4444444444,  0.0000000000,  0.4444444444,  0.6666666667,  0.0000000000,  0.4444444444,
    0.8888888889,  0.0000000000,  0.4444444444,  -0.8888888889, 0.2222222222,  0.4444444444,
    -0.6666666667, 0.2222222222,  0.4444444444,  -0.4444444444, 0.2222222222,  0.4444444444,
    -0.2222222222, 0.2222222222,  0.4444444444,  0.0000000000,  0.2222222222,  0.4444444444,
    0.2222222222,  0.2222222222,  0.4444444444,  0.4444444444,  0.2222222222,  0.4444444444,
    0.6666666667,  0.2222222222,  0.4444444444,  0.8888888889,  0.2222222222,  0.4444444444,
    -0.8888888889, 0.4444444444,  0.4444444444,  -0.6666666667, 0.4444444444,  0.4444444444,
    -0.4444444444, 0.4444444444,  0.4444444444,  -0.2222222222, 0.4444444444,  0.4444444444,
    0.0000000000,  0.4444444444,  0.4444444444,  0.2222222222,  0.4444444444,  0.4444444444,
    0.4444444444,  0.4444444444,  0.4444444444,  0.6666666667,  0.4444444444,  0.4444444444,
    0.8888888889,  0.4444444444,  0.4444444444,  -0.8888888889, 0.6666666667,  0.4444444444,
    -0.6666666667, 0.6666666667,  0.4444444444,  -0.4444444444, 0.6666666667,  0.4444444444,
    -0.2222222222, 0.6666666667,  0.4444444444,  0.0000000000,  0.6666666667,  0.4444444444,
    0.2222222222,  0.6666666667,  0.4444444444,  0.4444444444,  0.6666666667,  0.4444444444,
    0.6666666667,  0.6666666667,  0.4444444444,  0.8888888889,  0.6666666667,  0.4444444444,
    -0.8888888889, 0.8888888889,  0.4444444444,  -0.6666666667, 0.8888888889,  0.4444444444,
    -0.4444444444, 0.8888888889,  0.4444444444,  -0.2222222222, 0.8888888889,  0.4444444444,
    0.0000000000,  0.8888888889,  0.4444444444,  0.2222222222,  0.8888888889,  0.4444444444,
    0.4444444444,  0.8888888889,  0.4444444444,  0.6666666667,  0.8888888889,  0.4444444444,
    0.8888888889,  0.8888888889,  0.4444444444,  -0.8888888889, -0.8888888889, 0.6666666667,
    -0.6666666667, -0.8888888889, 0.6666666667,  -0.4444444444, -0.8888888889, 0.6666666667,
    -0.2222222222, -0.8888888889, 0.6666666667,  0.0000000000,  -0.8888888889, 0.6666666667,
    0.2222222222,  -0.8888888889, 0.6666666667,  0.4444444444,  -0.8888888889, 0.6666666667,
    0.6666666667,  -0.8888888889, 0.6666666667,  0.8888888889,  -0.8888888889, 0.6666666667,
    -0.8888888889, -0.6666666667, 0.6666666667,  -0.6666666667, -0.6666666667, 0.6666666667,
    -0.4444444444, -0.6666666667, 0.6666666667,  -0.2222222222, -0.6666666667, 0.6666666667,
    0.0000000000,  -0.6666666667, 0.6666666667,  0.2222222222,  -0.6666666667, 0.6666666667,
    0.4444444444,  -0.6666666667, 0.6666666667,  0.6666666667,  -0.6666666667, 0.6666666667,
    0.8888888889,  -0.6666666667, 0.6666666667,  -0.8888888889, -0.4444444444, 0.6666666667,
    -0.6666666667, -0.4444444444, 0.6666666667,  -0.4444444444, -0.4444444444, 0.6666666667,
    -0.2222222222, -0.4444444444, 0.6666666667,  0.0000000000,  -0.4444444444, 0.6666666667,
    0.2222222222,  -0.4444444444, 0.6666666667,  0.4444444444,  -0.4444444444, 0.6666666667,
    0.6666666667,  -0.4444444444, 0.6666666667,  0.8888888889,  -0.4444444444, 0.6666666667,
    -0.8888888889, -0.2222222222, 0.6666666667,  -0.6666666667, -0.2222222222, 0.6666666667,
    -0.4444444444, -0.2222222222, 0.6666666667,  -0.2222222222, -0.2222222222, 0.6666666667,
    0.0000000000,  -0.2222222222, 0.6666666667,  0.2222222222,  -0.2222222222, 0.6666666667,
    0.4444444444,  -0.2222222222, 0.6666666667,  0.6666666667,  -0.2222222222, 0.6666666667,
    0.8888888889,  -0.2222222222, 0.6666666667,  -0.8888888889, 0.0000000000,  0.6666666667,
    -0.6666666667, 0.0000000000,  0.6666666667,  -0.4444444444, 0.0000000000,  0.6666666667,
    -0.2222222222, 0.0000000000,  0.6666666667,  0.0000000000,  0.0000000000,  0.6666666667,
    0.2222222222,  0.0000000000,  0.6666666667,  0.4444444444,  0.0000000000,  0.6666666667,
    0.6666666667,  0.0000000000,  0.6666666667,  0.8888888889,  0.0000000000,  0.6666666667,
    -0.8888888889, 0.2222222222,  0.6666666667,  -0.6666666667, 0.2222222222,  0.6666666667,
    -0.4444444444, 0.2222222222,  0.6666666667,  -0.2222222222, 0.2222222222,  0.6666666667,
    0.0000000000,  0.2222222222,  0.6666666667,  0.2222222222,  0.2222222222,  0.6666666667,
    0.4444444444,  0.2222222222,  0.6666666667,  0.6666666667,  0.2222222222,  0.6666666667,
    0.8888888889,  0.2222222222,  0.6666666667,  -0.8888888889, 0.4444444444,  0.6666666667,
    -0.6666666667, 0.4444444444,  0.6666666667,  -0.4444444444, 0.4444444444,  0.6666666667,
    -0.2222222222, 0.4444444444,  0.6666666667,  0.0000000000,  0.4444444444,  0.6666666667,
    0.2222222222,  0.4444444444,  0.6666666667,  0.4444444444,  0.4444444444,  0.6666666667,
    0.6666666667,  0.4444444444,  0.6666666667,  0.8888888889,  0.4444444444,  0.6666666667,
    -0.8888888889, 0.6666666667,  0.6666666667,  -0.6666666667, 0.6666666667,  0.6666666667,
    -0.4444444444, 0.6666666667,  0.6666666667,  -0.2222222222, 0.6666666667,  0.6666666667,
    0.0000000000,  0.6666666667,  0.6666666667,  0.2222222222,  0.6666666667,  0.6666666667,
    0.4444444444,  0.6666666667,  0.6666666667,  0.6666666667,  0.6666666667,  0.6666666667,
    0.8888888889,  0.6666666667,  0.6666666667,  -0.8888888889, 0.8888888889,  0.6666666667,
    -0.6666666667, 0.8888888889,  0.6666666667,  -0.4444444444, 0.8888888889,  0.6666666667,
    -0.2222222222, 0.8888888889,  0.6666666667,  0.0000000000,  0.8888888889,  0.6666666667,
    0.2222222222,  0.8888888889,  0.6666666667,  0.4444444444,  0.8888888889,  0.6666666667,
    0.6666666667,  0.8888888889,  0.6666666667,  0.8888888889,  0.8888888889,  0.6666666667,
    -0.8888888889, -0.8888888889, 0.8888888889,  -0.6666666667, -0.8888888889, 0.8888888889,
    -0.4444444444, -0.8888888889, 0.8888888889,  -0.2222222222, -0.8888888889, 0.8888888889,
    0.0000000000,  -0.8888888889, 0.8888888889,  0.2222222222,  -0.8888888889, 0.8888888889,
    0.4444444444,  -0.8888888889, 0.8888888889,  0.6666666667,  -0.8888888889, 0.8888888889,
    0.8888888889,  -0.8888888889, 0.8888888889,  -0.8888888889, -0.6666666667, 0.8888888889,
    -0.6666666667, -0.6666666667, 0.8888888889,  -0.4444444444, -0.6666666667, 0.8888888889,
    -0.2222222222, -0.6666666667, 0.8888888889,  0.0000000000,  -0.6666666667, 0.8888888889,
    0.2222222222,  -0.6666666667, 0.8888888889,  0.4444444444,  -0.6666666667, 0.8888888889,
    0.6666666667,  -0.6666666667, 0.8888888889,  0.8888888889,  -0.6666666667, 0.8888888889,
    -0.8888888889, -0.4444444444, 0.8888888889,  -0.6666666667, -0.4444444444, 0.8888888889,
    -0.4444444444, -0.4444444444, 0.8888888889,  -0.2222222222, -0.4444444444, 0.8888888889,
    0.0000000000,  -0.4444444444, 0.8888888889,  0.2222222222,  -0.4444444444, 0.8888888889,
    0.4444444444,  -0.4444444444, 0.8888888889,  0.6666666667,  -0.4444444444, 0.8888888889,
    0.8888888889,  -0.4444444444, 0.8888888889,  -0.8888888889, -0.2222222222, 0.8888888889,
    -0.6666666667, -0.2222222222, 0.8888888889,  -0.4444444444, -0.2222222222, 0.8888888889,
    -0.2222222222, -0.2222222222, 0.8888888889,  0.0000000000,  -0.2222222222, 0.8888888889,
    0.2222222222,  -0.2222222222, 0.8888888889,  0.4444444444,  -0.2222222222, 0.8888888889,
    0.6666666667,  -0.2222222222, 0.8888888889,  0.8888888889,  -0.2222222222, 0.8888888889,
    -0.8888888889, 0.0000000000,  0.8888888889,  -0.6666666667, 0.0000000000,  0.8888888889,
    -0.4444444444, 0.0000000000,  0.8888888889,  -0.2222222222, 0.0000000000,  0.8888888889,
    0.0000000000,  0.0000000000,  0.8888888889,  0.2222222222,  0.0000000000,  0.8888888889,
    0.4444444444,  0.0000000000,  0.8888888889,  0.6666666667,  0.0000000000,  0.8888888889,
    0.8888888889,  0.0000000000,  0.8888888889,  -0.8888888889, 0.2222222222,  0.8888888889,
    -0.6666666667, 0.2222222222,  0.8888888889,  -0.4444444444, 0.2222222222,  0.8888888889,
    -0.2222222222, 0.2222222222,  0.8888888889,  0.0000000000,  0.2222222222,  0.8888888889,
    0.2222222222,  0.2222222222,  0.8888888889,  0.4444444444,  0.2222222222,  0.8888888889,
    0.6666666667,  0.2222222222,  0.8888888889,  0.8888888889,  0.2222222222,  0.8888888889,
    -0.8888888889, 0.4444444444,  0.8888888889,  -0.6666666667, 0.4444444444,  0.8888888889,
    -0.4444444444, 0.4444444444,  0.8888888889,  -0.2222222222, 0.4444444444,  0.8888888889,
    0.0000000000,  0.4444444444,  0.8888888889,  0.2222222222,  0.4444444444,  0.8888888889,
    0.4444444444,  0.4444444444,  0.8888888889,  0.6666666667,  0.4444444444,  0.8888888889,
    0.8888888889,  0.4444444444,  0.8888888889,  -0.8888888889, 0.6666666667,  0.8888888889,
    -0.6666666667, 0.6666666667,  0.8888888889,  -0.4444444444, 0.6666666667,  0.8888888889,
    -0.2222222222, 0.6666666667,  0.8888888889,  0.0000000000,  0.6666666667,  0.8888888889,
    0.2222222222,  0.6666666667,  0.8888888889,  0.4444444444,  0.6666666667,  0.8888888889,
    0.6666666667,  0.6666666667,  0.8888888889,  0.8888888889,  0.6666666667,  0.8888888889,
    -0.8888888889, 0.8888888889,  0.8888888889,  -0.6666666667, 0.8888888889,  0.8888888889,
    -0.4444444444, 0.8888888889,  0.8888888889,  -0.2222222222, 0.8888888889,  0.8888888889,
    0.0000000000,  0.8888888889,  0.8888888889,  0.2222222222,  0.8888888889,  0.8888888889,
    0.4444444444,  0.8888888889,  0.8888888889,  0.6666666667,  0.8888888889,  0.8888888889,
    0.8888888889,  0.8888888889,  0.8888888889,  -0.8888888889, -0.8888888889, -0.8888888889,
    -0.6666666667, -0.8888888889, -0.8888888889, -0.4444444444, -0.8888888889, -0.8888888889,
    -0.2222222222, -0.8888888889, -0.8888888889, 0.0000000000,  -0.8888888889, -0.8888888889,
    0.2222222222,  -0.8888888889, -0.8888888889, 0.4444444444,  -0.8888888889, -0.8888888889,
    0.6666666667,  -0.8888888889, -0.8888888889, 0.8888888889,  -0.8888888889, -0.8888888889,
    -0.8888888889, -0.6666666667, -0.8888888889, -0.6666666667, -0.6666666667, -0.8888888889,
    -0.4444444444, -0.6666666667, -0.8888888889, -0.2222222222, -0.6666666667, -0.8888888889,
    0.0000000000,  -0.6666666667, -0.8888888889, 0.2222222222,  -0.6666666667, -0.8888888889,
    0.4444444444,  -0.6666666667, -0.8888888889, 0.6666666667,  -0.6666666667, -0.8888888889,
    0.8888888889,  -0.6666666667, -0.8888888889, -0.8888888889, -0.4444444444, -0.8888888889,
    -0.6666666667, -0.4444444444, -0.8888888889, -0.4444444444, -0.4444444444, -0.8888888889,
    -0.2222222222, -0.4444444444, -0.8888888889, 0.0000000000,  -0.4444444444, -0.8888888889,
    0.2222222222,  -0.4444444444, -0.8888888889, 0.4444444444,  -0.4444444444, -0.8888888889,
    0.6666666667,  -0.4444444444, -0.8888888889, 0.8888888889,  -0.4444444444, -0.8888888889,
    -0.8888888889, -0.2222222222, -0.8888888889, -0.6666666667, -0.2222222222, -0.8888888889,
    -0.4444444444, -0.2222222222, -0.8888888889, -0.2222222222, -0.2222222222, -0.8888888889,
    0.0000000000,  -0.2222222222, -0.8888888889, 0.2222222222,  -0.2222222222, -0.8888888889,
    0.4444444444,  -0.2222222222, -0.8888888889, 0.6666666667,  -0.2222222222, -0.8888888889,
    0.8888888889,  -0.2222222222, -0.8888888889, -0.8888888889, 0.0000000000,  -0.8888888889,
    -0.6666666667, 0.0000000000,  -0.8888888889, -0.4444444444, 0.0000000000,  -0.8888888889,
    -0.2222222222, 0.0000000000,  -0.8888888889, 0.0000000000,  0.0000000000,  -0.8888888889,
    0.2222222222,  0.0000000000,  -0.8888888889, 0.4444444444,  0.0000000000,  -0.8888888889,
    0.6666666667,  0.0000000000,  -0.8888888889, 0.8888888889,  0.0000000000,  -0.8888888889,
    -0.8888888889, 0.2222222222,  -0.8888888889, -0.6666666667, 0.2222222222,  -0.8888888889,
    -0.4444444444, 0.2222222222,  -0.8888888889, -0.2222222222, 0.2222222222,  -0.8888888889,
    0.0000000000,  0.2222222222,  -0.8888888889, 0.2222222222,  0.2222222222,  -0.8888888889,
    0.4444444444,  0.2222222222,  -0.8888888889, 0.6666666667,  0.2222222222,  -0.8888888889,
    0.8888888889,  0.2222222222,  -0.8888888889, -0.8888888889, 0.4444444444,  -0.8888888889,
    -0.6666666667, 0.4444444444,  -0.8888888889, -0.4444444444, 0.4444444444,  -0.8888888889,
    -0.2222222222, 0.4444444444,  -0.8888888889, 0.0000000000,  0.4444444444,  -0.8888888889,
    0.2222222222,  0.4444444444,  -0.8888888889, 0.4444444444,  0.4444444444,  -0.8888888889,
    0.6666666667,  0.4444444444,  -0.8888888889, 0.8888888889,  0.4444444444,  -0.8888888889,
    -0.8888888889, 0.6666666667,  -0.8888888889, -0.6666666667, 0.6666666667,  -0.8888888889,
    -0.4444444444, 0.6666666667,  -0.8888888889, -0.2222222222, 0.6666666667,  -0.8888888889,
    0.0000000000,  0.6666666667,  -0.8888888889, 0.2222222222,  0.6666666667,  -0.8888888889,
    0.4444444444,  0.6666666667,  -0.8888888889, 0.6666666667,  0.6666666667,  -0.8888888889,
    0.8888888889,  0.6666666667,  -0.8888888889, -0.8888888889, 0.8888888889,  -0.8888888889,
    -0.6666666667, 0.8888888889,  -0.8888888889, -0.4444444444, 0.8888888889,  -0.8888888889,
    -0.2222222222, 0.8888888889,  -0.8888888889, 0.0000000000,  0.8888888889,  -0.8888888889,
    0.2222222222,  0.8888888889,  -0.8888888889, 0.4444444444,  0.8888888889,  -0.8888888889,
    0.6666666667,  0.8888888889,  -0.8888888889, 0.8888888889,  0.8888888889,  -0.8888888889,
    -0.8888888889, -0.8888888889, -0.6666666667, -0.6666666667, -0.8888888889, -0.6666666667,
    -0.4444444444, -0.8888888889, -0.6666666667, -0.2222222222, -0.8888888889, -0.6666666667,
    0.0000000000,  -0.8888888889, -0.6666666667, 0.2222222222,  -0.8888888889, -0.6666666667,
    0.4444444444,  -0.8888888889, -0.6666666667, 0.6666666667,  -0.8888888889, -0.6666666667,
    0.8888888889,  -0.8888888889, -0.6666666667, -0.8888888889, -0.6666666667, -0.6666666667,
    -0.6666666667, -0.6666666667, -0.6666666667, -0.4444444444, -0.6666666667, -0.6666666667,
    -0.2222222222, -0.6666666667, -0.6666666667, 0.0000000000,  -0.6666666667, -0.6666666667,
    0.2222222222,  -0.6666666667, -0.6666666667, 0.4444444444,  -0.6666666667, -0.6666666667,
    0.6666666667,  -0.6666666667, -0.6666666667, 0.8888888889,  -0.6666666667, -0.6666666667,
    -0.8888888889, -0.4444444444, -0.6666666667, -0.6666666667, -0.4444444444, -0.6666666667,
    -0.4444444444, -0.4444444444, -0.6666666667, -0.2222222222, -0.4444444444, -0.6666666667,
    0.0000000000,  -0.4444444444, -0.6666666667, 0.2222222222,  -0.4444444444, -0.6666666667,
    0.4444444444,  -0.4444444444, -0.6666666667, 0.6666666667,  -0.4444444444, -0.6666666667,
    0.8888888889,  -0.4444444444, -0.6666666667, -0.8888888889, -0.2222222222, -0.6666666667,
    -0.6666666667, -0.2222222222, -0.6666666667, -0.4444444444, -0.2222222222, -0.6666666667,
    -0.2222222222, -0.2222222222, -0.6666666667, 0.0000000000,  -0.2222222222, -0.6666666667,
    0.2222222222,  -0.2222222222, -0.6666666667, 0.4444444444,  -0.2222222222, -0.6666666667,
    0.6666666667,  -0.2222222222, -0.6666666667, 0.8888888889,  -0.2222222222, -0.6666666667,
    -0.8888888889, 0.0000000000,  -0.6666666667, -0.6666666667, 0.0000000000,  -0.6666666667,
    -0.4444444444, 0.0000000000,  -0.6666666667, -0.2222222222, 0.0000000000,  -0.6666666667,
    0.0000000000,  0.0000000000,  -0.6666666667, 0.2222222222,  0.0000000000,  -0.6666666667,
    0.4444444444,  0.0000000000,  -0.6666666667, 0.6666666667,  0.0000000000,  -0.6666666667,
    0.8888888889,  0.0000000000,  -0.6666666667, -0.8888888889, 0.2222222222,  -0.6666666667,
    -0.6666666667, 0.2222222222,  -0.6666666667, -0.4444444444, 0.2222222222,  -0.6666666667,
    -0.2222222222, 0.2222222222,  -0.6666666667, 0.0000000000,  0.2222222222,  -0.6666666667,
    0.2222222222,  0.2222222222,  -0.6666666667, 0.4444444444,  0.2222222222,  -0.6666666667,
    0.6666666667,  0.2222222222,  -0.6666666667, 0.8888888889,  0.2222222222,  -0.6666666667,
    -0.8888888889, 0.4444444444,  -0.6666666667, -0.6666666667, 0.4444444444,  -0.6666666667,
    -0.4444444444, 0.4444444444,  -0.6666666667, -0.2222222222, 0.4444444444,  -0.6666666667,
    0.0000000000,  0.4444444444,  -0.6666666667, 0.2222222222,  0.4444444444,  -0.6666666667,
    0.4444444444,  0.4444444444,  -0.6666666667, 0.6666666667,  0.4444444444,  -0.6666666667,
    0.8888888889,  0.4444444444,  -0.6666666667, -0.8888888889, 0.6666666667,  -0.6666666667,
    -0.6666666667, 0.6666666667,  -0.6666666667, -0.4444444444, 0.6666666667,  -0.6666666667,
    -0.2222222222, 0.6666666667,  -0.6666666667, 0.0000000000,  0.6666666667,  -0.6666666667,
    0.2222222222,  0.6666666667,  -0.6666666667, 0.4444444444,  0.6666666667,  -0.6666666667,
    0.6666666667,  0.6666666667,  -0.6666666667, 0.8888888889,  0.6666666667,  -0.6666666667,
    -0.8888888889, 0.8888888889,  -0.6666666667, -0.6666666667, 0.8888888889,  -0.6666666667,
    -0.4444444444, 0.8888888889,  -0.6666666667, -0.2222222222, 0.8888888889,  -0.6666666667,
    0.0000000000,  0.8888888889,  -0.6666666667, 0.2222222222,  0.8888888889,  -0.6666666667,
    0.4444444444,  0.8888888889,  -0.6666666667, 0.6666666667,  0.8888888889,  -0.6666666667,
    0.8888888889,  0.8888888889,  -0.6666666667, -0.8888888889, -0.8888888889, -0.4444444444,
    -0.6666666667, -0.8888888889, -0.4444444444, -0.4444444444, -0.8888888889, -0.4444444444,
    -0.2222222222, -0.8888888889, -0.4444444444, 0.0000000000,  -0.8888888889, -0.4444444444,
    0.2222222222,  -0.8888888889, -0.4444444444, 0.4444444444,  -0.8888888889, -0.4444444444,
    0.6666666667,  -0.8888888889, -0.4444444444, 0.8888888889,  -0.8888888889, -0.4444444444,
    -0.8888888889, -0.6666666667, -0.4444444444, -0.6666666667, -0.6666666667, -0.4444444444,
    -0.4444444444, -0.6666666667, -0.4444444444, -0.2222222222, -0.6666666667, -0.4444444444,
    0.0000000000,  -0.6666666667, -0.4444444444, 0.2222222222,  -0.6666666667, -0.4444444444,
    0.4444444444,  -0.6666666667, -0.4444444444, 0.6666666667,  -0.6666666667, -0.4444444444,
    0.8888888889,  -0.6666666667, -0.4444444444, -0.8888888889, -0.4444444444, -0.4444444444,
    -0.6666666667, -0.4444444444, -0.4444444444, -0.4444444444, -0.4444444444, -0.4444444444,
    -0.2222222222, -0.4444444444, -0.4444444444, 0.0000000000,  -0.4444444444, -0.4444444444,
    0.2222222222,  -0.4444444444, -0.4444444444, 0.4444444444,  -0.4444444444, -0.4444444444,
    0.6666666667,  -0.4444444444, -0.4444444444, 0.8888888889,  -0.4444444444, -0.4444444444,
    -0.8888888889, -0.2222222222, -0.4444444444, -0.6666666667, -0.2222222222, -0.4444444444,
    -0.4444444444, -0.2222222222, -0.4444444444, -0.2222222222, -0.2222222222, -0.4444444444,
    0.0000000000,  -0.2222222222, -0.4444444444, 0.2222222222,  -0.2222222222, -0.4444444444,
    0.4444444444,  -0.2222222222, -0.4444444444, 0.6666666667,  -0.2222222222, -0.4444444444,
    0.8888888889,  -0.2222222222, -0.4444444444, -0.8888888889, 0.0000000000,  -0.4444444444,
    -0.6666666667, 0.0000000000,  -0.4444444444, -0.4444444444, 0.0000000000,  -0.4444444444,
    -0.2222222222, 0.0000000000,  -0.4444444444, 0.0000000000,  0.0000000000,  -0.4444444444,
    0.2222222222,  0.0000000000,  -0.4444444444, 0.4444444444,  0.0000000000,  -0.4444444444,
    0.6666666667,  0.0000000000,  -0.4444444444, 0.8888888889,  0.0000000000,  -0.4444444444,
    -0.8888888889, 0.2222222222,  -0.4444444444, -0.6666666667, 0.2222222222,  -0.4444444444,
    -0.4444444444, 0.2222222222,  -0.4444444444, -0.2222222222, 0.2222222222,  -0.4444444444,
    0.0000000000,  0.2222222222,  -0.4444444444, 0.2222222222,  0.2222222222,  -0.4444444444,
    0.4444444444,  0.2222222222,  -0.4444444444, 0.6666666667,  0.2222222222,  -0.4444444444,
    0.8888888889,  0.2222222222,  -0.4444444444, -0.8888888889, 0.4444444444,  -0.4444444444,
    -0.6666666667, 0.4444444444,  -0.4444444444, -0.4444444444, 0.4444444444,  -0.4444444444,
    -0.2222222222, 0.4444444444,  -0.4444444444, 0.0000000000,  0.4444444444,  -0.4444444444,
    0.2222222222,  0.4444444444,  -0.4444444444, 0.4444444444,  0.4444444444,  -0.4444444444,
    0.6666666667,  0.4444444444,  -0.4444444444, 0.8888888889,  0.4444444444,  -0.4444444444,
    -0.8888888889, 0.6666666667,  -0.4444444444, -0.6666666667, 0.6666666667,  -0.4444444444,
    -0.4444444444, 0.6666666667,  -0.4444444444, -0.2222222222, 0.6666666667,  -0.4444444444,
    0.0000000000,  0.6666666667,  -0.4444444444, 0.2222222222,  0.6666666667,  -0.4444444444,
    0.4444444444,  0.6666666667,  -0.4444444444, 0.6666666667,  0.6666666667,  -0.4444444444,
    0.8888888889,  0.6666666667,  -0.4444444444, -0.8888888889, 0.8888888889,  -0.4444444444,
    -0.6666666667, 0.8888888889,  -0.4444444444, -0.4444444444, 0.8888888889,  -0.4444444444,
    -0.2222222222, 0.8888888889,  -0.4444444444, 0.0000000000,  0.8888888889,  -0.4444444444,
    0.2222222222,  0.8888888889,  -0.4444444444, 0.4444444444,  0.8888888889,  -0.4444444444,
    0.6666666667,  0.8888888889,  -0.4444444444, 0.8888888889,  0.8888888889,  -0.4444444444,
    -0.8888888889, -0.8888888889, -0.2222222222, -0.6666666667, -0.8888888889, -0.2222222222,
    -0.4444444444, -0.8888888889, -0.2222222222, -0.2222222222, -0.8888888889, -0.2222222222,
    0.0000000000,  -0.8888888889, -0.2222222222, 0.2222222222,  -0.8888888889, -0.2222222222,
    0.4444444444,  -0.8888888889, -0.2222222222, 0.6666666667,  -0.8888888889, -0.2222222222,
    0.8888888889,  -0.8888888889, -0.2222222222, -0.8888888889, -0.6666666667, -0.2222222222,
    -0.6666666667, -0.6666666667, -0.2222222222, -0.4444444444, -0.6666666667, -0.2222222222,
    -0.2222222222, -0.6666666667, -0.2222222222, 0.0000000000,  -0.6666666667, -0.2222222222,
    0.2222222222,  -0.6666666667, -0.2222222222, 0.4444444444,  -0.6666666667, -0.2222222222,
    0.6666666667,  -0.6666666667, -0.2222222222, 0.8888888889,  -0.6666666667, -0.2222222222,
    -0.8888888889, -0.4444444444, -0.2222222222, -0.6666666667, -0.4444444444, -0.2222222222,
    -0.4444444444, -0.4444444444, -0.2222222222, -0.2222222222, -0.4444444444, -0.2222222222,
    0.0000000000,  -0.4444444444, -0.2222222222, 0.2222222222,  -0.4444444444, -0.2222222222,
    0.4444444444,  -0.4444444444, -0.2222222222, 0.6666666667,  -0.4444444444, -0.2222222222,
    0.8888888889,  -0.4444444444, -0.2222222222, -0.8888888889, -0.2222222222, -0.2222222222,
    -0.6666666667, -0.2222222222, -0.2222222222, -0.4444444444, -0.2222222222, -0.2222222222,
    -0.2222222222, -0.2222222222, -0.2222222222, 0.0000000000,  -0.2222222222, -0.2222222222,
    0.2222222222,  -0.2222222222, -0.2222222222, 0.4444444444,  -0.2222222222, -0.2222222222,
    0.6666666667,  -0.2222222222, -0.2222222222, 0.8888888889,  -0.2222222222, -0.2222222222,
    -0.8888888889, 0.0000000000,  -0.2222222222, -0.6666666667, 0.0000000000,  -0.2222222222,
    -0.4444444444, 0.0000000000,  -0.2222222222, -0.2222222222, 0.0000000000,  -0.2222222222,
    0.0000000000,  0.0000000000,  -0.2222222222, 0.2222222222,  0.0000000000,  -0.2222222222,
    0.4444444444,  0.0000000000,  -0.2222222222, 0.6666666667,  0.0000000000,  -0.2222222222,
    0.8888888889,  0.0000000000,  -0.2222222222, -0.8888888889, 0.2222222222,  -0.2222222222,
    -0.6666666667, 0.2222222222,  -0.2222222222, -0.4444444444, 0.2222222222,  -0.2222222222,
    -0.2222222222, 0.2222222222,  -0.2222222222, 0.0000000000,  0.2222222222,  -0.2222222222,
    0.2222222222,  0.2222222222,  -0.2222222222, 0.4444444444,  0.2222222222,  -0.2222222222
};

#ifdef USE_LAYER_II_TABLES

/*
   Purpose:     Following tables contain dequantized samples for
                each legal codeword.
   Explanation: Only bit allocations 3...8 are tabled. */

// Bit_Alloc : 3
static FLOAT requant3[] = { -0.8571429253, -0.5714285970, -0.2857142985, 0.0000000000,
                            0.2857142985,  0.5714285970,  0.8571429253,  1.1428571939 };

// Bit_Alloc : 4
static FLOAT requant4[] = { -0.9333333969, -0.8000000715, -0.6666666865, -0.5333333611,
                            -0.4000000358, -0.2666666806, -0.1333333403, 0.0000000000,
                            0.1333333403,  0.2666666806,  0.4000000358,  0.5333333611,
                            0.6666666865,  0.8000000715,  0.9333333969,  1.0666667223 };

// Bit_Alloc : 5
static FLOAT requant5[] = { -0.9677419066, -0.9032257795, -0.8387096524, -0.7741935253,
                            -0.7096773982, -0.6451612711, -0.5806451440, -0.5161290169,
                            -0.4516128898, -0.3870967627, -0.3225806355, -0.2580645084,
                            -0.1935483813, -0.1290322542, -0.0645161271, 0.0000000000,
                            0.0645161271,  0.1290322542,  0.1935483813,  0.2580645084,
                            0.3225806355,  0.3870967627,  0.4516128898,  0.5161290169,
                            0.5806451440,  0.6451612711,  0.7096773982,  0.7741935253,
                            0.8387096524,  0.9032257795,  0.9677419066,  1.0322580338 };

// Bit_Alloc : 6
static FLOAT requant6[] = {
    -0.9841270447, -0.9523810148, -0.9206349850, -0.8888889551, -0.8571429253, -0.8253968954,
    -0.7936508656, -0.7619048357, -0.7301587462, -0.6984127164, -0.6666666865, -0.6349206567,
    -0.6031746268, -0.5714285970, -0.5396825671, -0.5079365373, -0.4761905074, -0.4444444776,
    -0.4126984477, -0.3809524179, -0.3492063582, -0.3174603283, -0.2857142985, -0.2539682686,
    -0.2222222388, -0.1904762089, -0.1587301642, -0.1269841343, -0.0952381045, -0.0634920672,
    -0.0317460336, 0.0000000000,  0.0317460336,  0.0634920672,  0.0952381045,  0.1269841343,
    0.1587301642,  0.1904762089,  0.2222222388,  0.2539682686,  0.2857142985,  0.3174603283,
    0.3492063582,  0.3809524179,  0.4126984477,  0.4444444776,  0.4761905074,  0.5079365373,
    0.5396825671,  0.5714285970,  0.6031746268,  0.6349206567,  0.6666666865,  0.6984127164,
    0.7301587462,  0.7619048357,  0.7936508656,  0.8253968954,  0.8571429253,  0.8888889551,
    0.9206349850,  0.9523810148,  0.9841270447,  1.0158730745
};

// Bit_Alloc : 7
static FLOAT requant7[] = {
    -0.9921259880, -0.9763779640, -0.9606299400, -0.9448819160, -0.9291338325, -0.9133858085,
    -0.8976377845, -0.8818897605, -0.8661417365, -0.8503937125, -0.8346456885, -0.8188976049,
    -0.8031495810, -0.7874015570, -0.7716535330, -0.7559055090, -0.7401574850, -0.7244094610,
    -0.7086614370, -0.6929134130, -0.6771653295, -0.6614173055, -0.6456692815, -0.6299212575,
    -0.6141732335, -0.5984252095, -0.5826771855, -0.5669291019, -0.5511810780, -0.5354330540,
    -0.5196850300, -0.5039370060, -0.4881889820, -0.4724409580, -0.4566929042, -0.4409448802,
    -0.4251968563, -0.4094488025, -0.3937007785, -0.3779527545, -0.3622047305, -0.3464567065,
    -0.3307086527, -0.3149606287, -0.2992126048, -0.2834645510, -0.2677165270, -0.2519685030,
    -0.2362204790, -0.2204724401, -0.2047244012, -0.1889763772, -0.1732283533, -0.1574803144,
    -0.1417322755, -0.1259842515, -0.1102362201, -0.0944881886, -0.0787401572, -0.0629921257,
    -0.0472440943, -0.0314960629, -0.0157480314, 0.0000000000,  0.0157480314,  0.0314960629,
    0.0472440943,  0.0629921257,  0.0787401572,  0.0944881886,  0.1102362201,  0.1259842515,
    0.1417322755,  0.1574803144,  0.1732283533,  0.1889763772,  0.2047244012,  0.2204724401,
    0.2362204790,  0.2519685030,  0.2677165270,  0.2834645510,  0.2992126048,  0.3149606287,
    0.3307086527,  0.3464567065,  0.3622047305,  0.3779527545,  0.3937007785,  0.4094488025,
    0.4251968563,  0.4409448802,  0.4566929042,  0.4724409580,  0.4881889820,  0.5039370060,
    0.5196850300,  0.5354330540,  0.5511810780,  0.5669291019,  0.5826771855,  0.5984252095,
    0.6141732335,  0.6299212575,  0.6456692815,  0.6614173055,  0.6771653295,  0.6929134130,
    0.7086614370,  0.7244094610,  0.7401574850,  0.7559055090,  0.7716535330,  0.7874015570,
    0.8031495810,  0.8188976049,  0.8346456885,  0.8503937125,  0.8661417365,  0.8818897605,
    0.8976377845,  0.9133858085,  0.9291338325,  0.9448819160,  0.9606299400,  0.9763779640,
    0.9921259880,  1.0078740120
};

// Bit_Alloc : 8
static FLOAT requant8[] = {
    -0.9960784912, -0.9882353544, -0.9803922176, -0.9725490808, -0.9647059441, -0.9568628073,
    -0.9490196705, -0.9411765337, -0.9333333969, -0.9254902601, -0.9176471233, -0.9098039865,
    -0.9019608498, -0.8941177130, -0.8862745762, -0.8784314394, -0.8705883026, -0.8627451658,
    -0.8549020290, -0.8470588923, -0.8392157555, -0.8313726187, -0.8235294819, -0.8156863451,
    -0.8078432083, -0.8000000715, -0.7921569347, -0.7843137980, -0.7764706612, -0.7686275244,
    -0.7607843876, -0.7529412508, -0.7450980544, -0.7372549176, -0.7294117808, -0.7215686440,
    -0.7137255073, -0.7058823705, -0.6980392337, -0.6901960969, -0.6823529601, -0.6745098233,
    -0.6666666865, -0.6588235497, -0.6509804130, -0.6431372762, -0.6352941394, -0.6274510026,
    -0.6196078658, -0.6117647290, -0.6039215922, -0.5960784554, -0.5882353187, -0.5803921819,
    -0.5725490451, -0.5647059083, -0.5568627715, -0.5490196347, -0.5411764979, -0.5333333611,
    -0.5254902244, -0.5176470876, -0.5098039508, -0.5019608140, -0.4941176772, -0.4862745404,
    -0.4784314036, -0.4705882668, -0.4627451301, -0.4549019933, -0.4470588565, -0.4392157197,
    -0.4313725829, -0.4235294461, -0.4156863093, -0.4078431726, -0.4000000358, -0.3921568990,
    -0.3843137622, -0.3764706254, -0.3686274588, -0.3607843220, -0.3529411852, -0.3450980484,
    -0.3372549117, -0.3294117749, -0.3215686381, -0.3137255013, -0.3058823645, -0.2980392277,
    -0.2901960909, -0.2823529541, -0.2745098174, -0.2666666806, -0.2588235438, -0.2509804070,
    -0.2431372702, -0.2352941334, -0.2274509966, -0.2196078598, -0.2117647231, -0.2039215863,
    -0.1960784495, -0.1882353127, -0.1803921610, -0.1725490242, -0.1647058874, -0.1568627506,
    -0.1490196139, -0.1411764771, -0.1333333403, -0.1254902035, -0.1176470667, -0.1098039299,
    -0.1019607931, -0.0941176564, -0.0862745121, -0.0784313753, -0.0705882385, -0.0627451017,
    -0.0549019650, -0.0470588282, -0.0392156877, -0.0313725509, -0.0235294141, -0.0156862754,
    -0.0078431377, 0.0000000000,  0.0078431377,  0.0156862754,  0.0235294141,  0.0313725509,
    0.0392156877,  0.0470588282,  0.0549019650,  0.0627451017,  0.0705882385,  0.0784313753,
    0.0862745121,  0.0941176564,  0.1019607931,  0.1098039299,  0.1176470667,  0.1254902035,
    0.1333333403,  0.1411764771,  0.1490196139,  0.1568627506,  0.1647058874,  0.1725490242,
    0.1803921610,  0.1882353127,  0.1960784495,  0.2039215863,  0.2117647231,  0.2196078598,
    0.2274509966,  0.2352941334,  0.2431372702,  0.2509804070,  0.2588235438,  0.2666666806,
    0.2745098174,  0.2823529541,  0.2901960909,  0.2980392277,  0.3058823645,  0.3137255013,
    0.3215686381,  0.3294117749,  0.3372549117,  0.3450980484,  0.3529411852,  0.3607843220,
    0.3686274588,  0.3764706254,  0.3843137622,  0.3921568990,  0.4000000358,  0.4078431726,
    0.4156863093,  0.4235294461,  0.4313725829,  0.4392157197,  0.4470588565,  0.4549019933,
    0.4627451301,  0.4705882668,  0.4784314036,  0.4862745404,  0.4941176772,  0.5019608140,
    0.5098039508,  0.5176470876,  0.5254902244,  0.5333333611,  0.5411764979,  0.5490196347,
    0.5568627715,  0.5647059083,  0.5725490451,  0.5803921819,  0.5882353187,  0.5960784554,
    0.6039215922,  0.6117647290,  0.6196078658,  0.6274510026,  0.6352941394,  0.6431372762,
    0.6509804130,  0.6588235497,  0.6666666865,  0.6745098233,  0.6823529601,  0.6901960969,
    0.6980392337,  0.7058823705,  0.7137255073,  0.7215686440,  0.7294117808,  0.7372549176,
    0.7450980544,  0.7529412508,  0.7607843876,  0.7686275244,  0.7764706612,  0.7843137980,
    0.7921569347,  0.8000000715,  0.8078432083,  0.8156863451,  0.8235294819,  0.8313726187,
    0.8392157555,  0.8470588923,  0.8549020290,  0.8627451658,  0.8705883026,  0.8784314394,
    0.8862745762,  0.8941177130,  0.9019608498,  0.9098039865,  0.9176471233,  0.9254902601,
    0.9333333969,  0.9411765337,  0.9490196705,  0.9568628073,  0.9647059441,  0.9725490808,
    0.9803922176,  0.9882353544,  0.9960784912,  1.0039216280
};

#endif /* USE_LAYER_II_TABLES */

/*
   Purpose:     Layer II bit allocation table for each subband (Table B.2b).
   Explanation: If the bitstream uses tables B.2a or B.2b, then subband 0 is
                the first element in the array. Otherwise subband 0 is the 9th
                element in the array. Note that the number of subbands varies
                between different bit allocation tables. */
static BYTE Layer_II_bit_alloc[] = { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
                                     3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2 };

/*
   Purpose:     Corresponding row index of each subband in table
                'bits_per_codeword_idx[][]'.
   Explanation: If the bitstream uses tables B.2a row index should be 1.
                For table B.2b use the indices in the second row.
                Tables B.2c and B.2d use the last row. Subband number is
                used when indexing columns. */
static BYTE _idx[3][30] =
    {
        { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0 },
        { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3 },
        { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    };

/*
   Purpose:     Index to table 'bits_per_codeword[]'.
   Explanation: Note that table '_idx[][]' will determine the row index,
                bit allocation determines the column. */
static BYTE bits_per_codeword_idx[5][16] = {
    { 0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 },
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17 },
    { 0, 1, 2, 3, 4, 5, 6, 17, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 2, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
};

/*
   Purpose:     Number of bits for each legal codeword (Table B.4 : 6th column).
   Explanation: - */
static BYTE bits_per_codeword[] = { 0, 5, 7,  3,  10, 4,  5,  6,  7,
                                    8, 9, 10, 11, 12, 13, 14, 15, 16 };

/*
   Purpose:     Grouping information for each legal codeword
                (Table B.4 : 4th column).
   Explanation: - */
static BYTE grouping[] = { 2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

/*
   Purpose:     Number of levels when grouped in 3 samples per codeword.
   Explanation: - */
static int32 nlevels[] = { 0,   3,   5,    7,    9,    15,   31,    63,    127,
                           255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535L };

/*
   Purpose:     Number of bits needed to locate MSB-bit of each legal codeword.
   Explanation: Obtained from Table B.4 by counting how many bits are needed
                so that the value would be equal the value in the 1st column
                of the table. */
static BYTE msb_bit[] = { 0, 0, 0, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

/*
   Purpose:     Table to deinterleave left and right channel of
                Layer II and III.
   Explanation: - */
static BYTE deinterleave_Layer_II[2][2 * 96] = {
    // no deinterleaving needed for mono channel
    { 0,   32,  64,  1,   33,  65,  2,   34,  66,  3,   35,  67,  4,   36,  68,  5,   37,  69,
      6,   38,  70,  7,   39,  71,  8,   40,  72,  9,   41,  73,  10,  42,  74,  11,  43,  75,
      12,  44,  76,  13,  45,  77,  14,  46,  78,  15,  47,  79,  16,  48,  80,  17,  49,  81,
      18,  50,  82,  19,  51,  83,  20,  52,  84,  21,  53,  85,  22,  54,  86,  23,  55,  87,
      24,  56,  88,  25,  57,  89,  26,  58,  90,  27,  59,  91,  28,  60,  92,  29,  61,  93,
      30,  62,  94,  31,  63,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107,
      108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
      126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
      144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
      162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
      180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191 },
    // stereo channel
    { /*
        0,  96,  32, 128,  64, 160,   1,  97,  33, 129,  65, 161,   2,  98,  34, 130,
       66, 162,   3,  99,  35, 131,  67, 163,   4, 100,  36, 132,  68, 164,   5, 101,
       37, 133,  69, 165,   6, 102,  38, 134,  70, 166,   7, 103,  39, 135,  71, 167,
        8, 104,  40, 136,  72, 168,   9, 105,  41, 137,  73, 169,  10, 106,  42, 138,
       74, 170,  11, 107,  43, 139,  75, 171,  12, 108,  44, 140,  76, 172,  13, 109,
       45, 141,  77, 173,  14, 110,  46, 142,  78, 174,  15, 111,  47, 143,  79, 175,
       16, 112,  48, 144,  80, 176,  17, 113,  49, 145,  81, 177,  18, 114,  50, 146,
       82, 178,  19, 115,  51, 147,  83, 179,  20, 116,  52, 148,  84, 180,  21, 117,
       53, 149,  85, 181,  22, 118,  54, 150,  86, 182,  23, 119,  55, 151,  87, 183,
       24, 120,  56, 152,  88, 184,  25, 121,  57, 153,  89, 185,  26, 122,  58, 154,
       90, 186,  27, 123,  59, 155,  91, 187,  28, 124,  60, 156,  92, 188,  29, 125,
       61, 157,  93, 189,  30, 126,  62, 158,  94, 190,  31, 127,  63, 159,  95, 191
       */
      0,  32, 64, 96,  128, 160, 1,  33, 65, 97,  129, 161, 2,  34, 66, 98,  130, 162,
      3,  35, 67, 99,  131, 163, 4,  36, 68, 100, 132, 164, 5,  37, 69, 101, 133, 165,
      6,  38, 70, 102, 134, 166, 7,  39, 71, 103, 135, 167, 8,  40, 72, 104, 136, 168,
      9,  41, 73, 105, 137, 169, 10, 42, 74, 106, 138, 170, 11, 43, 75, 107, 139, 171,
      12, 44, 76, 108, 140, 172, 13, 45, 77, 109, 141, 173, 14, 46, 78, 110, 142, 174,
      15, 47, 79, 111, 143, 175, 16, 48, 80, 112, 144, 176, 17, 49, 81, 113, 145, 177,
      18, 50, 82, 114, 146, 178, 19, 51, 83, 115, 147, 179, 20, 52, 84, 116, 148, 180,
      21, 53, 85, 117, 149, 181, 22, 54, 86, 118, 150, 182, 23, 55, 87, 119, 151, 183,
      24, 56, 88, 120, 152, 184, 25, 57, 89, 121, 153, 185, 26, 58, 90, 122, 154, 186,
      27, 59, 91, 123, 155, 187, 28, 60, 92, 124, 156, 188, 29, 61, 93, 125, 157, 189,
      30, 62, 94, 126, 158, 190, 31, 63, 95, 127, 159, 191 }
};

/*
   Purpose:     Factor C for dequantization from Table B.4 : 2nd column.
   Explanation: - */
static FLOAT c[] = { 0.00000000000, 1.33333333333, 1.60000000000, 1.14285714286, 1.77777777777,
                     1.06666666666, 1.03225806452, 1.01587301587, 1.00787401575, 1.00392156863,
                     1.00195694716, 1.00097751711, 1.00048851979, 1.00024420024, 1.00012208522,
                     1.00006103888, 1.00003051851, 1.00001525902 };

/*
   Purpose:     Factor D for dequantization from Table B.4 : 3rd column.
   Explanation: - */
static FLOAT d[] = { 0.00000000000, 0.50000000000, 0.50000000000, 0.25000000000, 0.50000000000,
                     0.12500000000, 0.06250000000, 0.03125000000, 0.01562500000, 0.00781250000,
                     0.00390625000, 0.00195312500, 0.00097656250, 0.00048828125, 0.00024414063,
                     0.00012207031, 0.00006103516, 0.00003051758 };

/*
   Purpose:     1 / 2^b, b = 0,...,15
   Explanation: - */
static FLOAT scaleII[] = { 0,         1. / 2,    1. / 4,     1. / 8,     1. / 16,   1. / 32,
                           1. / 64,   1. / 128,  1. / 256,   1. / 512,   1. / 1024, 1. / 2048,
                           1. / 4096, 1. / 8192, 1. / 16384, 1. / 32768L };


/**************************************************************************
  Title        : seek_layerII

  Purpose      : Reads one frame without processing the decoded parameters.

  Usage        : y = seek_layerII(mp)

  Input        : mp - MP2 stream parameters

  Explanation  : This function can be used to implement seeking of layer II.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
seek_layerII(MP_Stream *mp)
{
    II_decode_bit_alloc(mp);
    II_decode_scale(mp);

    for (int i = 0; i < SCALE_BLOCK; i++)
        II_buffer_sample(mp);
}


/**************************************************************************
  Title        : II_decode_bit_alloc

  Purpose      : Decodes the bit allocation of layer II.

  Usage        : II_decode_bit_alloc(mp)

  Input        : mp - MP2 stream parameters

  Explanation  : The number of bits used per subband varies from 0 to 4
                 as a function of subband number as dictated by the
                 appropriate to the given sampling frequency and bit rate.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
II_decode_bit_alloc(MP_Stream *mp)
{
    BYTE *bit_alloc, *alloc_bits;
    int i, temp;

    auto subbands = mp->header->subbands();

    // printf("subbands = %i\n", mp->header->subbands());

    // Get the bit allocation scheme used in this frame.
    alloc_bits = &Layer_II_bit_alloc[mp->header->GetLayer2Alloc()];

    // printf("alloc_bits = %i %i \n", *alloc_bits, mp->header->GetLayer2Alloc());

    i = 0;
    bit_alloc = mp->frame->bit_alloc;
    while (i < mp->header->jsbound() << (mp->header->channels() - 1)) {
        *bit_alloc++ = (BYTE) mp->bs->getBits(*alloc_bits);

        // Left and right channel use the same number of bits
        // for the corresponding subband.
        if (mp->header->channels() == 2)
            alloc_bits += (i & 1) ? 1 : 0;
        else
            alloc_bits++;

        i++;
    }

    switch (mp->header->mode()) {
        // Left and right channel use the same bit allocation.
        case MPG_MD_JOINT_STEREO:
            i = mp->header->jsbound();
            while (i < subbands) {
                temp = (BYTE) mp->bs->getBits(*alloc_bits++);
                *bit_alloc++ = temp;
                *bit_alloc++ = temp;
                i++;
            }
            break;
    }
}


/**************************************************************************
  Title        : II_decode_scale

  Purpose      : Decodes the scalefactors of layer II.

  Usage        : II_decode_scale(mp)

  Input        : mp - MP2 stream parameters

  Explanation  : Each frame consists of 36 samples per subband. The 36 samples
                 are divided into 3 groups/parts. Each part contains therefore
                 12 samples per subband. Each part and subband gets a
                 scalefactor which can be also shared by the other parts. This
                 is indicated by the scalefactor selection information.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
II_decode_scale(MP_Stream *mp)
{
    BYTE scfi_alloc[2 * SBLIMIT];
    BYTE *scfi, *bit_alloc, *sf_group1, *sf_group2, *sf_group3;
    int i, num_of_scfi;
    int16 temp;

    scfi = &scfi_alloc[0];
    bit_alloc = mp->frame->bit_alloc;
    num_of_scfi = mp->header->subbands() << (mp->header->channels() - 1);

    // Scalefactors for group 1.
    sf_group1 = mp->frame->scale_factors;
    // Scalefactors for group 2.
    sf_group2 = mp->frame->scale_factors + num_of_scfi;
    // Scalefactors for group 3.
    sf_group3 = mp->frame->scale_factors + (num_of_scfi << 1);

    // Get the scalefactor selection information.
    i = 0;
    while (i < num_of_scfi) {
        *scfi++ = (BYTE)((*bit_alloc++) ? mp->bs->getBits(2) : 4);
        i++;
    }

    // Get the actual scalefactors for each group.
    i = 0;
    scfi = &scfi_alloc[0];
    while (i < num_of_scfi) {
        switch (*scfi++) {
            case 0:
                // Each group have a separate scalefactor.
                *sf_group1++ = mp->bs->getBits(6);
                *sf_group2++ = mp->bs->getBits(6);
                *sf_group3++ = mp->bs->getBits(6);
                break;

            case 1:
                // Groups 1 and 2 share the scalefactor.
                temp = mp->bs->getBits(6);
                *sf_group1++ = temp;
                *sf_group2++ = temp;

                // Group 3 has separate scalefactor.
                *sf_group3++ = mp->bs->getBits(6);
                break;

            case 2:
                // Same scalefactor is used in all groups.
                temp = (BYTE) mp->bs->getBits(6);
                *sf_group1++ = temp;
                *sf_group2++ = temp;
                *sf_group3++ = temp;
                break;

            case 3:
                // Group 1 has separate scalefactor.
                *sf_group1++ = mp->bs->getBits(6);

                // Groups 2 and 3 share the same scalefactor.
                temp = (BYTE) mp->bs->getBits(6);
                *sf_group2++ = temp;
                *sf_group3++ = temp;
                break;

            case 4:
                // No scalefactor present (bit allocation is zero).
                *sf_group1++ = SCALE_RANGE - 1;
                *sf_group2++ = SCALE_RANGE - 1;
                *sf_group3++ = SCALE_RANGE - 1;
                break;
        }
        i++;
    }
}


/**************************************************************************
  Title        : II_buffer_sample

  Purpose      : Decodes the quantized samples of layer II.

  Usage        : II_buffer_sample(mp)

  Input        : mp - MP2 stream parameters

  Explanation  : The samples are decoded in a method similiar to that used in
                 layer I, however, now there is provision for packing three
                 consecutive samples in a single codeword for certain
                 quantizers.

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
II_buffer_sample(MP_Stream *mp)
{
    BYTE *alloc_table, grouping_idx, *bit_alloc;
    int16 *quant, temp;
    int i, bits_per_sample;

    quant = mp->frame->quant;
    bit_alloc = mp->frame->bit_alloc;
    alloc_table = &_idx[mp->header->GetLayer2TableIdx()][0];

    i = 0;
    while (i < mp->header->jsbound() << (mp->header->channels() - 1)) {
        grouping_idx = bits_per_codeword_idx[*alloc_table][*bit_alloc];
        bits_per_sample = bits_per_codeword[grouping_idx];

        // Check for grouping in subband.
        switch (grouping[grouping_idx]) {
            case 0:
                *quant++ = mp->bs->getBits(bits_per_sample);
                *quant++ = mp->bs->getBits(bits_per_sample);
                *quant++ = mp->bs->getBits(bits_per_sample);
                break;

            case 1: // bit_alloc = 3, 5, 9
                *quant++ = mp->bs->getBits(bits_per_sample);
                break;

            case 2: // For no sample transmitted.
                *quant++ = 0;
                *quant++ = 0;
                *quant++ = 0;
                break;
        }

        switch (mp->header->channels()) {
            case 1:
                alloc_table++;
                break;

            case 2:
                alloc_table += (i & 1) ? 1 : 0;
                break;
        }
        bit_alloc++;
        i++;
    }

    switch (mp->header->mode()) {
        // Left and right channel share the quantized sample.
        case MPG_MD_JOINT_STEREO:
            i = mp->header->jsbound();
            while (i < mp->header->subbands()) {
                i++;
                grouping_idx = bits_per_codeword_idx[*alloc_table++][*bit_alloc];
                bits_per_sample = bits_per_codeword[grouping_idx];

                /* check for grouping in subband */
                switch (grouping[grouping_idx]) {
                    case 0:
                        temp = mp->bs->getBits(bits_per_sample);
                        *quant++ = temp;
                        *quant++ = temp;
                        temp = mp->bs->getBits(bits_per_sample);
                        *quant++ = temp;
                        *quant++ = temp;
                        temp = mp->bs->getBits(bits_per_sample);
                        *quant++ = temp;
                        *quant++ = temp;
                        break;

                    case 1: // bit_alloc = 3, 5, 9
                        temp = mp->bs->getBits(bits_per_sample);
                        *quant++ = temp;
                        *quant++ = temp;
                        break;

                    case 2: // For no sample transmitted.
                        *quant++ = 0;
                        *quant++ = 0;
                        *quant++ = 0;
                        *quant++ = 0;
                        *quant++ = 0;
                        *quant++ = 0;
                        break;
                }
                bit_alloc += 2;
            }
            break;
    }
}


/**************************************************************************
  Title        : II_dequantize_sample

  Purpose      : Obtains the reconstructed samples of layer II.

  Usage        : II_dequantize_sample(mp)

  Input        : mp - MP2 stream parameters

  Explanation  : -

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
II_dequantize_sample(MP_Stream *mp, BYTE *scale_factor)
{
    BYTE grouping_idx, mask_idx;
    BYTE *alloc_table, *de_table, *bit_alloc;
    int16 *quant;
    int i, channels, num_of_samples, mask1, mask2;
    FLOAT *fraction, *rec, *q_table;
    FLOAT sc, sf, c_factor, d_factor;

    channels = mp->header->channels() - 1;
    de_table = &deinterleave_Layer_II[channels][0];
    quant = mp->frame->quant;
    bit_alloc = mp->frame->bit_alloc;
    rec = fraction = mp->buffer->reconstructed;

    /*
     * Since the maximum subband it not necessarily equal to 'SBLIMIT'
     * initialize the reconstructed samples to zero before dequantization.
     */
    num_of_samples = (SBLIMIT << channels);
    memset(rec, 0, sizeof(FLOAT) * num_of_samples * 3);

    i = 0;
    num_of_samples = mp->header->subbands() << channels;
    alloc_table = &_idx[mp->header->GetLayer2TableIdx()][0];

    while (i < num_of_samples) {
        grouping_idx = bits_per_codeword_idx[*alloc_table][*bit_alloc];
        mask_idx = msb_bit[grouping_idx];
        mask1 = sign_mask[mask_idx];
        mask2 = sample_mask[mask_idx];
        sc = scaleII[mask_idx];
        sf = scale_factors[*scale_factor];
        c_factor = c[grouping_idx];
        d_factor = d[grouping_idx];

        switch (nlevels[grouping_idx]) {
            case 0: // For no sample transmitted.
                quant += 3;
                rec = &fraction[*de_table++];
                *rec = 0.0;
                rec = &fraction[*de_table++];
                *rec = 0.0;
                rec = &fraction[*de_table++];
                *rec = 0.0;
                break;

            case 3: // Grouping, get the samples from the pre-defined tables.
                q_table = &group3_samples[3 * *quant++];
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                break;

            case 5: // Grouping, get the samples from the pre-defined tables.
                q_table = &group5_samples[3 * *quant++];
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                break;

            case 9: // Grouping, get the samples from the pre-defined tables.
                q_table = &group9_samples[3 * *quant++];
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = *q_table++;
                *rec *= sf;
                break;

#ifdef USE_LAYER_II_TABLES
            case 7:
                rec = &fraction[*de_table++];
                *rec = requant3[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant3[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant3[*quant++];
                *rec *= sf;
                break;

            case 15:
                rec = &fraction[*de_table++];
                *rec = requant4[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant4[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant4[*quant++];
                *rec *= sf;
                break;

            case 31:
                rec = &fraction[*de_table++];
                *rec = requant5[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant5[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant5[*quant++];
                *rec *= sf;
                break;

            case 63:
                rec = &fraction[*de_table++];
                *rec = requant6[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant6[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant6[*quant++];
                *rec *= sf;
                break;

            case 127:
                rec = &fraction[*de_table++];
                *rec = requant7[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant7[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant7[*quant++];
                *rec *= sf;
                break;

            case 255:
                rec = &fraction[*de_table++];
                *rec = requant8[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant8[*quant++];
                *rec *= sf;
                rec = &fraction[*de_table++];
                *rec = requant8[*quant++];
                *rec *= sf;
                break;
#else
            case 7:
            case 15:
            case 31:
            case 63:
            case 127:
            case 255:
#endif /* USE_LAYER_II_TABLES */

            case 511:
            case 1023:
            case 2047:
            case 4095:
            case 8191:
            case 16383:
            case 32767:
            case 65535L: // No grouping.

                rec = &fraction[*de_table++];
                *rec = (*quant & mask1) ? 0.0 : -1.0;
                *rec += (*quant++ & mask2) * sc;
                *rec += d_factor;
                *rec *= c_factor;
                *rec *= sf;

                rec = &fraction[*de_table++];
                *rec = (*quant & mask1) ? 0.0 : -1.0;
                *rec += (*quant++ & mask2) * sc;
                *rec += d_factor;
                *rec *= c_factor;
                *rec *= sf;

                rec = &fraction[*de_table++];
                *rec = (*quant & mask1) ? 0.0 : -1.0;
                *rec += (*quant++ & mask2) * sc;
                *rec += d_factor;
                *rec *= c_factor;
                *rec *= sf;

                break;
        }

        switch (mp->header->channels()) {
            case 1:
                alloc_table++;
                break;

            case 2:
                alloc_table += (i & 1) ? 1 : 0;
                break;
        }

        i++;
        bit_alloc++;
        scale_factor++;
    }
}


#ifdef GENERATE_TABLES

#include <math.h>
#include <stdlib.h>

#ifdef NO_GROUPING_SAMPLES

/**************************************************************************
  Title        : main

  Purpose      : Creates Layer II dequantization tables (excluding grouping)
                 for the specified bit allocations.

  Usage        : main(argc, argv)

  Input        : argc    - number of command line arguments
                 argv[0] - name of executable
                 argv[1] - number of tables (1-6) to generate
                 argv[2] - name output file

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
main(void)
{
    FILE *fp;
    int i, j;
    int bit_allocII[] = { 3, 4, 5, 6, 7, 8 };
    int C_and_D_idx[] = { 2, 4, 5, 6, 7, 8 };
    int bit_alloc_len = 6;
    FLOAT foo;

    if (argc != 3) {
        fprintf(stderr, "usage : %s <num_tables> <output_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    bit_alloc_len = atoi(argv[1]);

    fp = fopen(argv[2], "w");
    if (fp == NULL) {
        fprintf(stderr, "Unable to open file %s.\n", argv[2]);
        exit(EXIT_FAILURE);
    }

    for (i = 0; i < bit_alloc_len; i++) {
        fprintf(fp, "Bit_Alloc : %i\n", bit_allocII[i]);
        for (j = 0; j < (1 << bit_allocII[i]); j++) {
            foo = (j & sign_mask[bit_allocII[i] - 1]) ? 0.0 : -1.0;
            foo += (j & sample_mask[bit_allocII[i] - 1]) * scaleII[bit_allocII[i] - 1];
            foo += d[C_and_D_idx[i]];
            foo *= c[C_and_D_idx[i]];

            if (j && ((j % 5) == 0))
                fprintf(fp, "\n");

            fprintf(fp, "%3.10f, ", foo);
        }
        fprintf(fp, "\n");
    }

    fclose(fp);
}

#else

/**************************************************************************
  Title        : main

  Purpose      : Creates Layer II dequantization tables for grouped samples.

  Usage        : main(argc, argv)

  Input        : argc    - number of command line arguments
                 argv[0] - name of executable
                 argv[1] - name output file

  Author(s)    : Juha Ojanpera
  *************************************************************************/

void
main(void)
{
    int i, j, k, c, nlevels, sample, m;
    int step[] = { 3, 5, 9 };
    int len[] = { 32, 128, 1024 };
    int mask[] = { 2, 3, 4 };
    int bit[] = { 2, 4, 8 };
    double cc[] = { 1.33333333333, 1.6, 1.77777777777 };
    double dd[] = { 0.5, 0.5, 0.5 };
    double rec;
    FILE *fp;

    if (argc != 2) {
        fprintf(stderr, "usage : %s <output_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    fp = fopen(argv[1], "w");
    if (fp == NULL) {
        fprintf(stderr, "Unable to open file %s.\n", argv[1]);
        exit(EXIT_FAILURE);
    }

    m = 0;
    for (i = 2; i < 3; i++) {
        nlevels = step[i];
        for (j = 0; j < len[i]; j++) {
            c = j;
            for (k = 0; k < 3; k++) {
                sample = c % nlevels;
                c /= nlevels;

                if (((sample >> (mask[i] - 1)) & 1) == 0)
                    rec = -1.0;
                else
                    rec = 0.0;

                rec += (double) (sample & ((1L << (mask[i] - 1)) - 1)) / (double) bit[i];
                rec += dd[i];
                rec *= cc[i];

                if (m && m % 5 == 0)
                    fprintf(fp, "\n");

                m++;
                if (rec >= 0)
                    fprintf(fp, " %4.10f, ", rec);
                else
                    fprintf(fp, "%4.10f, ", rec);
            }
        }
        fprintf(fp, "\n");
    }
    fclose(fp);
}

#endif /* NO_GROUPING_SAMPLES */

#endif /* GENERATE_TABLES */
